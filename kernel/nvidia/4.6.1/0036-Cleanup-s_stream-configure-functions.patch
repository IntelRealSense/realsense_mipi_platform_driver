From 7b361b841a7bcb9422f9ce823a726904842e6462 Mon Sep 17 00:00:00 2001
From: Xin Zhang <xin.x.zhang@intel.com>
Date: Wed, 2 Mar 2022 15:52:56 +0800
Subject: [PATCH] Cleanup s_stream/configure functions

Signed-off-by: Xin Zhang <xin.x.zhang@intel.com>
---
 drivers/media/i2c/d4xx.c | 342 +++++++++++++++------------------------
 1 file changed, 130 insertions(+), 212 deletions(-)

diff --git a/drivers/media/i2c/d4xx.c b/drivers/media/i2c/d4xx.c
index b7b9b1c46..cb84f6fcd 100644
--- a/drivers/media/i2c/d4xx.c
+++ b/drivers/media/i2c/d4xx.c
@@ -719,7 +719,7 @@ static const struct ds5_resolution ds5_size_imu[] = {
 static const struct ds5_format ds5_depth_formats_d43x[] = {
 	{
 		// TODO: 0x31 is replaced with 0x1e since it caused low FPS in Jetson.
-		.data_type = 0x1e,	/* UYVY */
+		.data_type = 0x1e,	/* Z16 */
 		.mbus_code = MEDIA_BUS_FMT_UYVY8_1X16,
 		.n_resolutions = ARRAY_SIZE(d43x_depth_sizes),
 		.resolutions = d43x_depth_sizes,
@@ -739,7 +739,7 @@ static const struct ds5_format ds5_depth_formats_d43x[] = {
 static const struct ds5_format ds5_depth_formats_d46x[] = {
 	{
 		// TODO: 0x31 is replaced with 0x1e since it caused low FPS in Jetson.
-		.data_type = 0x1e,	/* UYVY */
+		.data_type = 0x1e,	/* Z16 */
 		.mbus_code = MEDIA_BUS_FMT_UYVY8_1X16,
 		.n_resolutions = ARRAY_SIZE(d46x_depth_sizes),
 		.resolutions = d46x_depth_sizes,
@@ -1052,135 +1052,100 @@ static int ds5_sensor_set_fmt(struct v4l2_subdev *sd, struct v4l2_subdev_pad_con
 
 static int ds5_configure(struct ds5 *state)
 {
-	/*const*/ struct ds5_sensor *depth = &state->depth.sensor;
-	/*const*/ struct ds5_sensor *motion_t = &state->motion_t.sensor;
-	struct ds5_sensor *rgb = &state->rgb.sensor;
-	u8 dfmt = depth->streaming ? 0x31 : 0;
-	u8 mfmt = motion_t->streaming ? motion_t->config.format->data_type : 0;
-	u8 rgbfmt = rgb->streaming ? rgb->config.format->data_type : 0;
+	struct ds5_sensor *sensor;
+	u16 fmt, md_fmt, vc_id;
+	u16 dt_addr, md_addr, override_addr, fps_addr, width_addr, height_addr;
+	enum sensor_type type;
 	int ret;
 
-#ifdef CONFIG_TEGRA_CAMERA_PLATFORM
-	if (state->dser_dev) {
-		if (depth->streaming) {
-			ret = max9296_update_pipe(state->dser_dev, DEPTH_SENSOR, dfmt);
-		} else if (motion_t->streaming) {
-			ret = max9296_update_pipe(state->dser_dev, IR_SENSOR, mfmt);
-		} else if (rgb->streaming) {
-			ret = max9296_update_pipe(state->dser_dev, RGB_SENSOR, rgbfmt);
-		}
-
-		dev_info(state->dser_dev, "d %x %d, m %x %d, rgb %x %d",
-			 dfmt, depth->streaming, mfmt, motion_t->streaming,
-			 rgbfmt, rgb->streaming);
-		if (ret < 0)
-			return ret;
-	}
-	if (state->ser_dev) {
-		if (depth->streaming) {
-			ret = max9295_update_pipe(state->ser_dev, DEPTH_SENSOR, dfmt);
-		} else if (motion_t->streaming) {
-			ret = max9295_update_pipe(state->ser_dev, IR_SENSOR, mfmt);
-		} else if (rgb->streaming) {
-			ret = max9295_update_pipe(state->ser_dev, RGB_SENSOR, rgbfmt);
-		}
-
-		dev_info(state->ser_dev, "d %x %d, m %x %d, rgb %x %d",
-			 dfmt, depth->streaming, mfmt, motion_t->streaming,
-			 rgbfmt, rgb->streaming);
-		if (ret < 0)
-			return ret;
+	if (state->is_depth) {
+		sensor = &state->depth.sensor;
+		dt_addr = DS5_DEPTH_STREAM_DT;
+		md_addr = DS5_DEPTH_STREAM_MD;
+		override_addr = DS5_DEPTH_OVERRIDE;
+		fps_addr = DS5_DEPTH_FPS;
+		width_addr = DS5_DEPTH_RES_WIDTH;
+		height_addr = DS5_DEPTH_RES_HEIGHT;
+		type = DEPTH_SENSOR;
+		// TODO: read VC from device tree
+		vc_id = 0;
+	} else if (state->is_rgb) {
+		sensor = &state->rgb.sensor;
+		dt_addr = DS5_RGB_STREAM_DT;
+		md_addr = DS5_RGB_STREAM_MD;
+		override_addr = 0;
+		fps_addr = DS5_RGB_FPS;
+		width_addr = DS5_RGB_RES_WIDTH;
+		height_addr = DS5_RGB_RES_HEIGHT;
+		type = RGB_SENSOR;
+		vc_id = 1;
+	} else if (state->is_y8) {
+		sensor = &state->motion_t.sensor;
+		dt_addr = DS5_IR_STREAM_DT;
+		md_addr = DS5_IR_STREAM_MD;
+		override_addr = DS5_IR_OVERRIDE;
+		fps_addr = DS5_IR_FPS;
+		width_addr = DS5_IR_RES_WIDTH;
+		height_addr = DS5_IR_RES_HEIGHT;
+		type = IR_SENSOR;
+		vc_id = 2;
+	} else {
+		return -EINVAL;
 	}
-#endif
 
-	// IR Camera
-	if (state->is_y8) {
-		ret = ds5_write(state, DS5_IR_STREAM_DT, mfmt);
-		if (ret < 0)
-			return ret;
-
-		ret = ds5_write(state, DS5_IR_STREAM_MD, (0x2 << 8) | 0x12);
-		if (ret < 0)
-			return ret;
-
-		if (state->is_y8 && motion_t->streaming) {
-			ret = ds5_write(state, DS5_IR_OVERRIDE, mfmt);
-			if (ret < 0)
-				return ret;
+	fmt = sensor->streaming ? sensor->config.format->data_type : 0;
+	md_fmt = 0x12;
 
-			// FPS
-			ret = ds5_write(state, DS5_IR_FPS, motion_t->config.framerate);
-			if (ret < 0)
-				return ret;
-
-			// WIDTH
-			ret = ds5_write(state, DS5_IR_RES_WIDTH, motion_t->config.resolution->width);
-			if (ret < 0)
-				return ret;
-
-			// HEIGHT
-			ret = ds5_write(state, DS5_IR_RES_HEIGHT, motion_t->config.resolution->height);
+#ifdef CONFIG_TEGRA_CAMERA_PLATFORM
+	if (state->dser_dev) {
+		if (sensor->streaming) {
+			ret = max9296_update_pipe(state->dser_dev, type, fmt);
 			if (ret < 0)
 				return ret;
 		}
 	}
-
-	// DEPTH Camera
-	if (state->is_depth) {
-		ret = ds5_write(state, DS5_DEPTH_STREAM_DT, dfmt);
-		if (ret < 0)
-			return ret;
-
-		ret = ds5_write(state, DS5_DEPTH_STREAM_MD, 0x12);
-		if (ret < 0)
-			return ret;
-
-		if (state->is_depth && depth->streaming) {
-			// override output DT to 0x1E, since 0x31 is not supported in Jetson
-			ret = ds5_write(state, DS5_DEPTH_OVERRIDE, 0x1E);
-
-			// FPS
-			ret = ds5_write(state, DS5_DEPTH_FPS, depth->config.framerate);
-			if (ret < 0)
-				return ret;
-
-			// WIDTH
-			ret = ds5_write(state, DS5_DEPTH_RES_WIDTH, depth->config.resolution->width);
-			if (ret < 0)
-				return ret;
-
-			// HEIGHT
-			ret = ds5_write(state, DS5_DEPTH_RES_HEIGHT, depth->config.resolution->height);
+	if (state->ser_dev) {
+		if (sensor->streaming) {
+			ret = max9295_update_pipe(state->ser_dev, type, fmt);
 			if (ret < 0)
 				return ret;
 		}
 	}
+#endif
 
-	// RGB camera
-	if (rgb->streaming) {
-		ret = ds5_write(state, DS5_RGB_STREAM_DT, rgbfmt);
-		if (ret < 0)
-			return ret;
-
-		/* TODO: read VC from DT */
-		/*       currently, writing 1 */
-		ret = ds5_write(state, DS5_RGB_STREAM_MD, (0x1 << 8) | 0x12);
-		if (ret < 0)
-			return ret;
+	// Still set depth stream data type as original 0x31
+	if (state->is_depth)
+		ret = ds5_write(state, dt_addr, 0x31);
+	else
+		ret = ds5_write(state, dt_addr, fmt);
+	if (ret < 0)
+		return ret;
 
-		ret = ds5_write(state, DS5_RGB_FPS, rgb->config.framerate);
-		if (ret < 0)
-				return ret;
+	ret = ds5_write(state, md_addr, (vc_id << 8) | md_fmt);
+	if (ret < 0)
+		return ret;
 
-		ret = ds5_write(state, DS5_RGB_RES_WIDTH, rgb->config.resolution->width);
-		if (ret < 0)
-			return ret;
+	if (!sensor->streaming)
+		return ret;
 
-		ret = ds5_write(state, DS5_RGB_RES_HEIGHT, rgb->config.resolution->height);
+	if (override_addr != 0) {
+		ret = ds5_write(state, override_addr, fmt);
 		if (ret < 0)
 			return ret;
 	}
 
+	ret = ds5_write(state, fps_addr, sensor->config.framerate);
+	if (ret < 0)
+		return ret;
+
+	ret = ds5_write(state, width_addr, sensor->config.resolution->width);
+	if (ret < 0)
+		return ret;
+
+	ret = ds5_write(state, height_addr, sensor->config.resolution->height);
+	if (ret < 0)
+		return ret;
+
 	return 0;
 }
 
@@ -2531,132 +2496,85 @@ static int ds5_mux_s_frame_interval(struct v4l2_subdev *sd,
 static int ds5_mux_s_stream(struct v4l2_subdev *sd, int on)
 {
 	struct ds5 *state = container_of(sd, struct ds5, mux.sd.subdev);
-	u16 streaming, status, depth_status, ir_status, rgb_status;
+	u16 streaming, status;
 	int ret = 0;
 	unsigned int i = 0;
 	int restore_val = 0;
+	u16 config_status_base, stream_status_base, stream_id;
+
+	if (state->is_depth) {
+		config_status_base = DS5_DEPTH_CONFIG_STATUS;
+		stream_status_base = DS5_DEPTH_STREAM_STATUS;
+		stream_id = DS5_STREAM_DEPTH;
+	} else if (state->is_rgb) {
+		config_status_base = DS5_RGB_CONFIG_STATUS;
+		stream_status_base = DS5_RGB_STREAM_STATUS;
+		stream_id = DS5_STREAM_RGB;
+	} else if (state->is_y8) {
+		config_status_base = DS5_IR_CONFIG_STATUS;
+		stream_status_base = DS5_IR_STREAM_STATUS;
+		stream_id = DS5_STREAM_IR;
+	} else {
+		return -EINVAL;
+	}
 
-	dev_info(&state->client->dev, "%s(): called for stream %s, on = %d\n", __func__, state->mux.last_set->sd.name, on);
+	dev_dbg(&state->client->dev, "s_stream for stream %s, on = %d\n", state->mux.last_set->sd.name, on);
 
 	restore_val = state->mux.last_set->streaming;
 	state->mux.last_set->streaming = on;
 
-	if (state->is_imu)
-		return 0;
-
 	if (on) {
-		dev_info(&state->client->dev, "%s(): starting stream\n", __func__);
 		ret = ds5_configure(state);
+		if (ret)
+			goto restore_s_state;
 
-		// TODO: remove, workaround for FW crash in start
-		//msleep_range(100); - removed)
-
-		if (!ret) {
-			// start IR
-			if (state->is_y8) {
-				dev_info(&state->client->dev, "%s(): starting IR stream\n", __func__);
-				ret = ds5_write(state, DS5_START_STOP_STREAM, DS5_STREAM_START | DS5_STREAM_IR);
-				if (ret < 0)
-					goto restore_s_state;
-			}
-
-			// start DEPTH
-			if (state->is_depth) {
-				dev_info(&state->client->dev, "%s(): starting DEPTH stream\n", __func__);
-				ret = ds5_write(state, DS5_START_STOP_STREAM, DS5_STREAM_START | DS5_STREAM_DEPTH);
-				if (ret < 0)
-					goto restore_s_state;
-			}
-
-			// start RGB
-			if (state->is_rgb) {
-				dev_info(&state->client->dev, "%s(): starting RGB stream\n", __func__);
-				ret = ds5_write(state, DS5_START_STOP_STREAM, DS5_STREAM_START | DS5_STREAM_RGB);
-				if (ret < 0)
-					goto restore_s_state;
-			}
-
-			// check streaming status from FW
-			for (i = 0; i < DS5_START_MAX_COUNT; i++) {
-				if (state->is_depth) {
-					ds5_read(state, DS5_DEPTH_STREAM_STATUS, &streaming);
-					ds5_read(state, DS5_DEPTH_CONFIG_STATUS, &status);
-					if ((status & DS5_STATUS_STREAMING) && streaming == DS5_STREAM_STREAMING) break;
-				}
-				if (state->is_y8) {
-					ds5_read(state, DS5_IR_STREAM_STATUS, &streaming);
-					ds5_read(state, DS5_IR_CONFIG_STATUS, &status);
-					if ((status & DS5_STATUS_STREAMING) && streaming == DS5_STREAM_STREAMING) break;
-				}
-				if (state->is_rgb) {
-					ds5_read(state, DS5_RGB_STREAM_STATUS, &streaming);
-					ds5_read(state, DS5_RGB_CONFIG_STATUS, &status);
-					if ((status & DS5_STATUS_STREAMING) && streaming == DS5_STREAM_STREAMING) break;
-				}
-
-				msleep_range(DS5_START_POLL_TIME);
-			}
-
-			if (on && (DS5_START_MAX_COUNT == i)) {
-				dev_err(&state->client->dev, "%s(): start streaming failed, exit on timeout\n", __func__);
-				ret = -1;
-			} else {
-				dev_info(&state->client->dev, "%s(): started after %dms \n", __func__, i*DS5_START_POLL_TIME);
-			}
-		}
-	} else {
-		dev_info(&state->client->dev, "%s(): stopping stream\n", __func__);
-
-		// TODO: remove, workaround for FW crash in start
-		//msleep_range(100); - removed
-
-		// stop IR
-		if (state->is_y8) {
-			dev_info(&state->client->dev, "%s(): stopping IR stream\n", __func__);
-			ret = ds5_write(state, DS5_START_STOP_STREAM, DS5_STREAM_STOP | DS5_STREAM_IR);
-			if (ret < 0)
-				goto restore_s_state;
-		}
+		ret = ds5_write(state, DS5_START_STOP_STREAM,
+				DS5_STREAM_START | stream_id);
+		if (ret < 0)
+			goto restore_s_state;
+
+		// check streaming status from FW
+		for (i = 0; i < DS5_START_MAX_COUNT; i++) {
+			ds5_read(state, stream_status_base, &streaming);
+			ds5_read(state, config_status_base, &status);
+			if ((status & DS5_STATUS_STREAMING) &&
+			    streaming == DS5_STREAM_STREAMING)
+				break;
 
-		// stop DEPTH
-		if (state->is_depth) {
-			dev_info(&state->client->dev, "%s(): stopping DEPTH stream\n", __func__);
-			ret = ds5_write(state, DS5_START_STOP_STREAM, DS5_STREAM_STOP | DS5_STREAM_DEPTH);
-			if (ret < 0)
-				goto restore_s_state;
+			msleep_range(DS5_START_POLL_TIME);
 		}
 
-		// stop RGB
-		if (state->is_rgb) {
-			dev_info(&state->client->dev, "%s(): stopping RGB stream\n", __func__);
-			ret = ds5_write(state, DS5_START_STOP_STREAM, DS5_STREAM_STOP | DS5_STREAM_RGB);
-			if (ret < 0)
-				goto restore_s_state;
+		if (DS5_START_MAX_COUNT == i) {
+			dev_err(&state->client->dev,
+				"start streaming failed, exit on timeout\n");
+			ret = -EAGAIN;
+			goto restore_s_state;
+		} else {
+			dev_dbg(&state->client->dev, "started after %dms\n",
+				i * DS5_START_POLL_TIME);
 		}
+	} else {
+		ret = ds5_write(state, DS5_START_STOP_STREAM,
+				DS5_STREAM_STOP | stream_id);
+		if (ret < 0)
+			goto restore_s_state;
 	}
 
-	ds5_read(state, DS5_DEPTH_CONFIG_STATUS, &depth_status);
-	ds5_read(state, DS5_RGB_CONFIG_STATUS, &rgb_status);
-	ds5_read(state, DS5_IR_CONFIG_STATUS, &ir_status);
-
-	dev_info(&state->client->dev, "%s(): streaming %x depth status 0x%04x, ir status 0x%04x, rgb status 0x%04x, ret=%d\n", __func__,
-		 streaming, depth_status, ir_status, rgb_status, ret);
+	ds5_read(state, config_status_base, &status);
+	ds5_read(state, stream_status_base, &streaming);
+	dev_dbg(&state->client->dev, "streaming %x status 0x%04x\n",
+		 streaming, status);
 
 	return ret;
 
 restore_s_state:
+	ds5_read(state, config_status_base, &status);
+	dev_err(&state->client->dev, "stream toggle failed! %x status 0x%04x\n",
+		 restore_val, status);
 
-	// Obtain the last known FW status
-	ds5_read(state, DS5_DEPTH_CONFIG_STATUS, &depth_status);
-	ds5_read(state, DS5_RGB_CONFIG_STATUS, &rgb_status);
-	ds5_read(state, DS5_IR_CONFIG_STATUS, &ir_status);
-
-	dev_info(&state->client->dev, "%s(): stream toggle failed! %x depth status 0x%04x, ir status 0x%04x, rgb status 0x%04x\n",
-		__func__, restore_val, depth_status, ir_status, rgb_status);
-	// Revert on the failure update
 	state->mux.last_set->streaming = restore_val;
 
-	return -1;
+	return ret;
 }
 
 //static int ds5_set_power(struct ds5 *state, int on)
-- 
2.17.1

