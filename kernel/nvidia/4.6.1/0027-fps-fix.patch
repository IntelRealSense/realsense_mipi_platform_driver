From 2b8e309dee269bb739bacfa90f4d00571496b033 Mon Sep 17 00:00:00 2001
From: Emil Jahshan <emil.jahshan@intel.com>
Date: Wed, 26 Jan 2022 15:03:42 +0200
Subject: [PATCH] fps fix

 - fixes fps issue for IR and RGB
 - added more resolutions for IR for usespace

Signed-off-by: Emil Jahshan <emil.jahshan@intel.com>
---
 drivers/media/i2c/d4xx.c | 48 ++++++++++++++++++++++++++++++----------
 1 file changed, 36 insertions(+), 12 deletions(-)

diff --git a/drivers/media/i2c/d4xx.c b/drivers/media/i2c/d4xx.c
index 088df4bc5..8caa634f9 100644
--- a/drivers/media/i2c/d4xx.c
+++ b/drivers/media/i2c/d4xx.c
@@ -54,6 +54,7 @@
 #define DS5_DEPTH_RES_WIDTH		0x4004
 #define DS5_DEPTH_RES_HEIGHT		0x4008
 #define DS5_DEPTH_FPS			0x400C
+#define DS5_DEPTH_OVERRIDE		0x401C
 #define DS5_RGB_STREAM_DT		0x4020
 #define DS5_RGB_STREAM_MD		0x4022
 #define DS5_RGB_RES_WIDTH		0x4024
@@ -64,6 +65,7 @@
 #define DS5_IR_RES_WIDTH	0x4084
 #define DS5_IR_RES_HEIGHT	0x4088
 #define DS5_IR_FPS			0x408C
+#define DS5_IR_OVERRIDE	0x409C
 
 #define DS5_DEPTH_CONTROL_BASE		0x4100
 #define DS5_RGB_CONTROL_BASE		0x4200
@@ -525,17 +527,37 @@ static const struct ds5_resolution d46x_depth_sizes[] = {
 	},
 };
 
-static const struct ds5_resolution ds5_sizes[] = {
+static const struct ds5_resolution y8_sizes[] = {
 	{
 		.width = 1280,
 		.height = 720,
-		.framerates = ds5_framerates,
-		.n_framerates = ARRAY_SIZE(ds5_framerates),
+		.framerates = ds5_depth_framerate_to_30,
+		.n_framerates = ARRAY_SIZE(ds5_depth_framerate_to_30),
+	}, {
+		.width =  848,
+		.height = 480,
+		.framerates = ds5_framerate_to_90,
+		.n_framerates = ARRAY_SIZE(ds5_framerate_to_90),
 	}, {
 		.width =  640,
 		.height = 480,
-		.framerates = ds5_framerates,
-		.n_framerates = ARRAY_SIZE(ds5_framerates),
+		.framerates = ds5_framerate_to_90,
+		.n_framerates = ARRAY_SIZE(ds5_framerate_to_90),
+	}, {
+		.width =  640,
+		.height = 360,
+		.framerates = ds5_framerate_to_90,
+		.n_framerates = ARRAY_SIZE(ds5_framerate_to_90),
+	}, {
+		.width =  480,
+		.height = 270,
+		.framerates = ds5_framerate_to_90,
+		.n_framerates = ARRAY_SIZE(ds5_framerate_to_90),
+	}, {
+		.width =  424,
+		.height = 240,
+		.framerates = ds5_framerate_to_90,
+		.n_framerates = ARRAY_SIZE(ds5_framerate_to_90),
 	}
 };
 
@@ -689,8 +711,8 @@ static const struct ds5_format ds5_y_formats_ds5u[] = {
 		/* First format: default */
 		.data_type = 0x2a,	/* Y8 */
 		.mbus_code = MEDIA_BUS_FMT_Y8_1X8,
-		.n_resolutions = ARRAY_SIZE(ds5_sizes),
-		.resolutions = ds5_sizes,
+		.n_resolutions = ARRAY_SIZE(y8_sizes),
+		.resolutions = y8_sizes,
 	}, {
 		.data_type = 0x24,	/* 24-bit Calibration */
 		.mbus_code = MEDIA_BUS_FMT_RGB888_1X24,	/* FIXME */
@@ -1012,7 +1034,7 @@ static int ds5_configure(struct ds5 *state)
 			return ret;

 		if (state->is_y8 && motion_t->streaming) {
-			ret = ds5_write(state, 0x401C, mfmt);
+			ret = ds5_write(state, DS5_IR_OVERRIDE, mfmt);
 			if (ret < 0)
 				return ret;
 
@@ -1045,7 +1067,7 @@ static int ds5_configure(struct ds5 *state)

 		if (state->is_depth && depth->streaming) {
 			// override output DT to 0x1E, since 0x31 is not supported in Jetson
-			ret = ds5_write(state, 0x401C, 0x1E);
+			ret = ds5_write(state, DS5_DEPTH_OVERRIDE, 0x1E);
 
 			// FPS
 			ret = ds5_write(state, DS5_DEPTH_FPS, depth->config.framerate);
@@ -1231,7 +1253,7 @@ static int ds5_hw_set_exposure(struct ds5 *state, u32 val)
 	return ret;
 }
 
-#define DS5_MAX_LOG_WAIT 50
+#define DS5_MAX_LOG_WAIT 200
 #define DS5_MAX_LOG_SLEEP 10
 #define DS5_MAX_LOG_POLL (DS5_MAX_LOG_WAIT / DS5_MAX_LOG_SLEEP)
 
@@ -1620,6 +1642,7 @@ static int ds5_g_volatile_ctrl(struct v4l2_ctrl *ctrl)
 				return ret;
 			if (!data)
 				break;
+			msleep_range(5);
 		}
 
 //		if (i == DS5_MAX_LOG_POLL)
@@ -2514,6 +2537,7 @@ static int ds5_mux_s_stream(struct v4l2_subdev *sd, int on)
 				dev_err(&state->client->dev, "%s(): start streaming failed\n", __func__);
 				ret = EAGAIN;
 			}
+			dev_info(&state->client->dev, "%s(): it took %dms to start stream\n", __func__, i*DS5_START_POLL_TIME);
 		}
 	} else {
 		dev_info(&state->client->dev, "%s(): stopping stream\n", __func__);
@@ -2538,7 +2562,7 @@ static int ds5_mux_s_stream(struct v4l2_subdev *sd, int on)
 		}
 
 		// stop RGB
-		if (state->is_depth) {
+		if (state->is_rgb) {
 			dev_info(&state->client->dev, "%s(): stopping RGB stream\n", __func__);
 			ret = ds5_write(state, DS5_START_STOP_STREAM, 0x101);
 			if (ret < 0)
@@ -3461,4 +3485,4 @@ module_i2c_driver(ds5_i2c_driver);
 MODULE_DESCRIPTION("Intel D4XX camera driver");
 MODULE_AUTHOR("Emil Jahshan (emil.jahshan@intel.com)");
 MODULE_LICENSE("GPL v2");
-MODULE_VERSION("1.0.0.8");
+MODULE_VERSION("1.0.0.9");
-- 
2.17.1

