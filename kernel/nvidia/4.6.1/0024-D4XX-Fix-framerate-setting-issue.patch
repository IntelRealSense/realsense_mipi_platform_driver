From 20457dad103336077f45ca8e339f427669a5c2b0 Mon Sep 17 00:00:00 2001
From: Xin Zhang <xin.x.zhang@intel.com>
Date: Sun, 16 Jan 2022 14:25:11 +0800
Subject: [PATCH] D4XX: Fix framerate setting issue

- Fix the wrong assumption of numerator always 1 and framerate overflow;
- Choose the close framerate for current resolution if not exactly match.

Signed-off-by: Xin Zhang <xin.x.zhang@intel.com>
---
 drivers/media/i2c/d4xx.c | 39 ++++++++++++++++++++++++++++-----------
 1 file changed, 28 insertions(+), 11 deletions(-)

diff --git a/drivers/media/i2c/d4xx.c b/drivers/media/i2c/d4xx.c
index e3a166d6b..78de6aafc 100644
--- a/drivers/media/i2c/d4xx.c
+++ b/drivers/media/i2c/d4xx.c
@@ -2395,30 +2395,47 @@ static int ds5_mux_g_frame_interval(struct v4l2_subdev *sd,
 	return 0;
 }
 
+static u8 __ds5_probe_framerate(const struct ds5_resolution *res, u8 target)
+{
+	int i;
+	u8 framerate;
+
+	for (i = 0; i < res->n_framerates; i++) {
+		framerate = res->framerates[i];
+		if (target <= framerate)
+			return framerate;
+	}
+
+	return res->framerates[res->n_framerates - 1];
+}
+
 static int ds5_mux_s_frame_interval(struct v4l2_subdev *sd,
 				    struct v4l2_subdev_frame_interval *fi)
 {
 	struct ds5 *state = container_of(sd, struct ds5, mux.sd.subdev);
-	struct ds5_sensor *depth = &state->depth.sensor;
-	struct ds5_sensor *motion = &state->motion_t.sensor;
-	struct ds5_sensor *rgb = &state->rgb.sensor;
-	struct ds5_sensor *imu = &state->imu.sensor;
-
+	struct ds5_sensor *sensor = NULL;
+	u8 framerate = 1;
 
-	if (NULL == sd || NULL == fi)
+	if (NULL == sd || NULL == fi || fi->interval.numerator == 0)
 		return -EINVAL;
 
 	dev_info(sd->dev, "%s(): %s %d\n", __func__, sd->name, fi->pad);
 
-
 	if(state->is_rgb)
-		rgb->config.framerate = fi->interval.denominator;
+		sensor = &state->rgb.sensor;
 	if (state->is_depth)
-		depth->config.framerate = fi->interval.denominator;
+		sensor = &state->depth.sensor;
 	if (state->is_y8)
-		motion->config.framerate = fi->interval.denominator;
+		sensor = &state->motion_t.sensor;
 	if (state->is_imu)
-		imu->config.framerate = fi->interval.denominator;
+		sensor = &state->imu.sensor;
+
+	framerate = fi->interval.denominator / fi->interval.numerator;
+	framerate = __ds5_probe_framerate(sensor->config.resolution, framerate);
+	sensor->config.framerate = framerate;
+	fi->interval.numerator = 1;
+	fi->interval.denominator = framerate;
+
 	return 0;
 }
 
-- 
2.17.1

