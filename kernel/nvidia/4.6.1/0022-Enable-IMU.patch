From 2bd58b2a46456bf604a64359915489803f5c98db Mon Sep 17 00:00:00 2001
From: Nael Masalha <nael.masalha@intel.com>
Date: Wed, 1 Dec 2021 10:40:04 +0200
Subject: [PATCH] Enable IMU

Signed-off-by: Nael Masalha <nael.masalha@intel.com>
---
 drivers/media/i2c/d4xx.c | 211 +++++++++++++++++++++++++++++++++------
 1 file changed, 178 insertions(+), 33 deletions(-)

diff --git a/drivers/media/i2c/d4xx.c b/drivers/media/i2c/d4xx.c
index b29b96390..41994f68c 100644
--- a/drivers/media/i2c/d4xx.c
+++ b/drivers/media/i2c/d4xx.c
@@ -87,6 +87,7 @@ enum ds5_mux_pad {
 	DS5_MUX_PAD_DEPTH,
 	DS5_MUX_PAD_MOTION_T,
 	DS5_MUX_PAD_RGB,
+	DS5_MUX_PAD_IMU,
 	DS5_MUX_PAD_COUNT,
 };
 
@@ -98,7 +99,7 @@ enum ds5_mux_pad {
 
 #define DS5_START_POLL_TIME	10
 
-#define DS5_START_MAX_TIME	700
+#define DS5_START_MAX_TIME	1000
 
 #define DS5_START_MAX_COUNT	(DS5_START_MAX_TIME / DS5_START_POLL_TIME)
 
@@ -269,7 +270,7 @@ struct ds5_resolution {
 	u16 width;
 	u16 height;
 	u8 n_framerates;
-	const u8 *framerates;
+	const u16 *framerates;
 };
 
 struct ds5_format {
@@ -335,6 +336,9 @@ struct ds5 {
 	struct {
 		struct ds5_sensor sensor;
 	} rgb;
+	struct {
+		struct ds5_sensor sensor;
+	} imu;
 	struct {
 		struct ds5_mux_subdev sd;
 		struct media_pad pads[DS5_MUX_PAD_COUNT];
@@ -353,6 +357,7 @@ struct ds5 {
 	int is_depth;
 	int is_y8;
 	int is_rgb;
+	int is_imu;
 	u16 fw_version;
 	u16 fw_build;
 };
@@ -429,7 +434,7 @@ static int ds5_raw_read(struct ds5 *state, u16 reg, void *val,
 
 /* Pad ops */
 
-static const u8 ds5_default_framerate = 30;
+static const u16 ds5_default_framerate = 30;
 
 // **********************
 // FIXME: D16 width must be doubled, because an 8-bit format is used. Check how
@@ -437,22 +442,23 @@ static const u8 ds5_default_framerate = 30;
 // **********************
 
 //TODO: keep 6, till 5 is supported by FW
-static const u8 ds5_framerates[] = {5, 30};
+static const u16 ds5_framerates[] = {5, 30};
 
 #define DS5_FRAMERATE_DEFAULT_IDX 1
 
-static const u8 ds5_framerate_30 = 30;
+static const u16 ds5_framerate_30 = 30;
 
-static const u8 ds5_framerate_15_30[] = {15, 30};
+static const u16 ds5_framerate_15_30[] = {15, 30};
 
-static const u8 ds5_framerate_25 = 25;
+static const u16 ds5_framerate_25 = 25;
 
-static const u8 ds5_depth_framerate_to_30[] = {5, 15, 30};
-static const u8 ds5_framerate_to_30[] = {5, 10, 15, 30};
-static const u8 ds5_framerate_to_60[] = {5, 15, 30, 60};
-static const u8 ds5_framerate_to_90[] = {5, 15, 30, 60, 90};
-static const u8 ds5_framerate_100[] = {100};
-static const u8 ds5_framerate_90[] = {90};
+static const u16 ds5_depth_framerate_to_30[] = {5, 15, 30};
+static const u16 ds5_framerate_to_30[] = {5, 10, 15, 30};
+static const u16 ds5_framerate_to_60[] = {5, 15, 30, 60};
+static const u16 ds5_framerate_to_90[] = {5, 15, 30, 60, 90};
+static const u16 ds5_framerate_100[] = {100};
+static const u16 ds5_framerate_90[] = {90};
+static const u16 ds5_imu_framerates[] = {5, 90};
 
 static const struct ds5_resolution d43x_depth_sizes[] = {
 	{
@@ -619,6 +625,15 @@ static const struct ds5_resolution d46x_calibration_sizes[] = {
 	},
 };
 
+static const struct ds5_resolution ds5_size_imu[] = {
+	{
+	.width =  32,
+	.height = 32,
+	.framerates = ds5_imu_framerates,
+	.n_framerates = ARRAY_SIZE(ds5_imu_framerates),
+	},
+};
+
 static const struct ds5_format ds5_depth_formats_d43x[] = {
 	{
 		// TODO: 0x31 is replaced with 0x1e since it caused low FPS in Jetson.
@@ -700,6 +715,16 @@ static const struct ds5_variant ds5_variants[] = {
 	},
 };
 
+static const struct ds5_format ds5_imu_formats[] = {
+	{
+		/* First format: default */
+		.data_type = 0x2a,	/* IMU DT */
+		.mbus_code = MEDIA_BUS_FMT_Y8_1X8,
+		.n_resolutions = ARRAY_SIZE(ds5_size_imu),
+		.resolutions = ds5_size_imu,
+	},
+};
+
 static const struct v4l2_mbus_framefmt ds5_mbus_framefmt_template = {
 	.width = 0,
 	.height = 0,
@@ -772,21 +797,38 @@ static int ds5_sensor_enum_frame_size(struct v4l2_subdev *sd,
 	// TODO: workaround for RGB enum framesizes, due to double instances of
 	//       the driver, should be removed in 4.9.
 	state = container_of(sd, struct ds5, depth.sensor.sd);
+	dev_info(sensor->sd.dev, "%s(): state->is_rgb %d\n", __func__, state->is_rgb);
+	dev_info(sensor->sd.dev, "%s(): state->is_depth %d\n", __func__, state->is_depth);
+	dev_info(sensor->sd.dev, "%s(): state->is_y8 %d\n", __func__, state->is_y8);
+	dev_info(sensor->sd.dev, "%s(): state->is_imu %d\n", __func__, state->is_imu);
+
 	if (state->is_rgb)
 		sensor = &state->rgb.sensor;
+	if (state->is_depth)
+		sensor = &state->depth.sensor;
+	if (state->is_y8)
+		sensor = &state->motion_t.sensor;
+	if (state->is_imu)
+		sensor = &state->imu.sensor;
 
+	dev_info(sensor->sd.dev, "%s(): after state->is_\n", __func__);
 	for (i = 0, fmt = sensor->formats; i < sensor->n_formats; i++, fmt++)
 		if (fse->code == fmt->mbus_code)
 			break;
+	dev_info(sensor->sd.dev, "%s(): after loop\n", __func__);
 
 	if (i == sensor->n_formats)
 		return -EINVAL;
+	dev_info(sensor->sd.dev, "%s(): after n_formats\n", __func__);
 
 	if (fse->index >= fmt->n_resolutions)
 		return -EINVAL;
+	dev_info(sensor->sd.dev, "%s(): after n_res\n", __func__);
 
 	fse->min_width = fse->max_width = fmt->resolutions[fse->index].width;
+	dev_info(sensor->sd.dev, "%s(): after wid\n", __func__);
 	fse->min_height = fse->max_height = fmt->resolutions[fse->index].height;
+	dev_info(sensor->sd.dev, "%s(): after he\n", __func__);
 
 	return 0;
 }
@@ -897,16 +939,27 @@ static int __ds5_sensor_set_fmt(struct ds5 *state, struct ds5_sensor *sensor,
 				struct v4l2_subdev_pad_config *cfg,
 				struct v4l2_subdev_format *fmt)
 {
-	struct v4l2_mbus_framefmt *mf = &fmt->format;
+	struct v4l2_mbus_framefmt *mf;// = &fmt->format;
 	//unsigned r;
 
+	dev_info(sensor->sd.dev, "%s(): state %p\n", __func__, state);
+	dev_info(sensor->sd.dev, "%s(): sensor %p\n", __func__, sensor);
+	dev_info(sensor->sd.dev, "%s(): cfg %p\n", __func__, cfg);
+	dev_info(sensor->sd.dev, "%s(): fmt %p\n", __func__, fmt);
+	dev_info(sensor->sd.dev, "%s(): fmt->format %p\n", __func__, &fmt->format);
+
+	mf = &fmt->format;
+
 	if (fmt->pad)
 		return -EINVAL;
+	dev_info(sensor->sd.dev, "%s(): after fmt->pad  %d\n", __func__, fmt->pad);
 
 	mutex_lock(&state->lock);
+	dev_info(sensor->sd.dev, "%s(): after state->lock \n", __func__);
 
 	sensor->config.format = ds5_sensor_find_format(sensor, mf,
 						&sensor->config.resolution);
+	dev_info(sensor->sd.dev, "%s(): after ds5_sensor_find_format \n", __func__);
 	//r = DS5_FRAMERATE_DEFAULT_IDX < sensor->config.resolution->n_framerates ?
 	//	DS5_FRAMERATE_DEFAULT_IDX : 0;
 	/* FIXME: check if a framerate has been set */
@@ -920,8 +973,10 @@ static int __ds5_sensor_set_fmt(struct ds5 *state, struct ds5_sensor *sensor,
 	else
 // FIXME: use this format in .s_stream()
 		sensor->format = *mf;
+	dev_info(sensor->sd.dev, "%s(): after sensor->format = *mf \n", __func__);
 
 	state->mux.last_set = sensor;
+	dev_info(sensor->sd.dev, "%s(): after state->mux.last_set = sensor \n", __func__);
 
 	mutex_unlock(&state->lock);
 
@@ -950,7 +1005,7 @@ static int ds5_configure(struct ds5 *state)
 	u8 rgbfmt = rgb->streaming ? rgb->config.format->data_type : 0;
 	int ret;
 
-	if (!state->is_rgb) { // TODO: remove
+	if (state->is_depth || state->is_y8) { // TODO: remove
 		u16 streaming, depth_status, rgb_status;
 		if (!dfmt && !mfmt && !rgbfmt)
 			return -EINVAL;
@@ -1010,7 +1065,7 @@ static int ds5_configure(struct ds5 *state)
 			ret = ds5_write(state, DS5_Y_RES_HEIGHT, motion_t->config.resolution->height);
 			if (ret < 0)
 				return ret;
-	}
+		}
 	}
 
 	// RGB camera
@@ -1037,6 +1092,7 @@ static int ds5_configure(struct ds5 *state)
 		if (ret < 0)
 			return ret;
 	}
+
 	return 0;
 }
 
@@ -1097,6 +1153,19 @@ static const struct v4l2_subdev_ops ds5_rgb_subdev_ops = {
 	.video = &ds5_sensor_video_ops,
 };
 
+static const struct v4l2_subdev_pad_ops ds5_imu_pad_ops = {
+	.enum_mbus_code		= ds5_sensor_enum_mbus_code,
+	.enum_frame_size	= ds5_sensor_enum_frame_size,
+	.enum_frame_interval	= ds5_sensor_enum_frame_interval,
+	.get_fmt		= ds5_sensor_get_fmt,
+	.set_fmt		= ds5_sensor_set_fmt,
+};
+
+static const struct v4l2_subdev_ops ds5_imu_subdev_ops = {
+	.pad = &ds5_imu_pad_ops,
+	.video = &ds5_sensor_video_ops,
+};
+
 static int ds5_hw_set_auto_exposure(struct ds5 *state, u32 val)
 {
 	int ret;
@@ -1290,11 +1359,11 @@ static int ds5_s_ctrl(struct v4l2_ctrl *ctrl)
 		ds5_hw_set_exposure(state, ctrl->val);
 		break;
 	case DS5_CAMERA_CID_LASER_POWER:
-		if (!state->is_rgb)
+		if (!state->is_rgb && !state->is_imu)
 			ds5_write(state, DS5_DEPTH_CONTROL_BASE | DS5_LASER_POWER, ctrl->val);
 		break;
 	case DS5_CAMERA_CID_MANUAL_LASER_POWER:
-		if (!state->is_rgb)
+		if (!state->is_rgb && !state->is_imu)
 			ds5_write(state, DS5_DEPTH_CONTROL_BASE | DS5_MANUAL_LASER_POWER, ctrl->val);
 		break;
 	case DS5_CAMERA_DEPTH_CALIBRATION_TABLE_SET: {
@@ -1995,6 +2064,13 @@ static int ds5_rgb_init(struct i2c_client *c, struct ds5 *state)
 			       &ds5_rgb_subdev_ops, "rgb");
 }
 
+static int ds5_imu_init(struct i2c_client *c, struct ds5 *state)
+{
+	state->imu.sensor.mux_pad = DS5_MUX_PAD_IMU;
+	return ds5_sensor_init(c, state, &state->imu.sensor,
+			       &ds5_imu_subdev_ops, "imu");
+}
+
 /* No locking needed */
 static int ds5_mux_enum_mbus_code(struct v4l2_subdev *sd,
 				  struct v4l2_subdev_pad_config *cfg,
@@ -2015,6 +2091,9 @@ static int ds5_mux_enum_mbus_code(struct v4l2_subdev *sd,
 	case DS5_MUX_PAD_RGB:
 		remote_sd = &state->rgb.sensor.sd;
 		break;
+	case DS5_MUX_PAD_IMU:
+		remote_sd = &state->imu.sensor.sd;
+		break;
 	case DS5_MUX_PAD_EXTERNAL:
 		if (mce->index >= state->motion_t.sensor.n_formats +
 		    state->depth.sensor.n_formats)
@@ -2044,6 +2123,8 @@ static int ds5_mux_enum_mbus_code(struct v4l2_subdev *sd,
 		remote_sd = &state->depth.sensor.sd;
 	if (state->is_y8)
 		remote_sd = &state->motion_t.sensor.sd;
+	if (state->is_imu)
+		remote_sd = &state->imu.sensor.sd;
 
 	/* Locks internally */
 	ret = ds5_sensor_enum_mbus_code(remote_sd, cfg, &tmp);
@@ -2072,6 +2153,8 @@ static int ds5_mux_enum_frame_size(struct v4l2_subdev *sd,
 		pad = DS5_MUX_PAD_MOTION_T;
 	if (state->is_rgb)
 		pad = DS5_MUX_PAD_RGB;
+	if (state->is_imu)
+		pad = DS5_MUX_PAD_IMU;
 
 	switch (pad) {
 	case DS5_MUX_PAD_MOTION_T:
@@ -2083,6 +2166,9 @@ static int ds5_mux_enum_frame_size(struct v4l2_subdev *sd,
 	case DS5_MUX_PAD_RGB:
 		remote_sd = &state->rgb.sensor.sd;
 		break;
+	case DS5_MUX_PAD_IMU:
+		remote_sd = &state->imu.sensor.sd;
+		break;
 	case DS5_MUX_PAD_EXTERNAL:
 		/*
 		 * Assume, that different sensors don't support the same formats
@@ -2134,6 +2220,8 @@ static int ds5_mux_enum_frame_interval(struct v4l2_subdev *sd,
 		pad = DS5_MUX_PAD_MOTION_T;
 	if (state->is_rgb)
 		pad = DS5_MUX_PAD_RGB;
+	if (state->is_imu)
+		pad = DS5_MUX_PAD_IMU;
 
 	switch (pad) {
 	case DS5_MUX_PAD_MOTION_T:
@@ -2145,6 +2233,9 @@ static int ds5_mux_enum_frame_interval(struct v4l2_subdev *sd,
 	case DS5_MUX_PAD_RGB:
 		remote_sd = &state->rgb.sensor.sd;
 		break;
+	case DS5_MUX_PAD_IMU:
+		remote_sd = &state->imu.sensor.sd;
+		break;
 	case DS5_MUX_PAD_EXTERNAL:
 		/* Similar to ds5_mux_enum_frame_size() above */
 		if (state->is_rgb)
@@ -2184,13 +2275,21 @@ static int ds5_mux_set_fmt(struct v4l2_subdev *sd, struct v4l2_subdev_pad_config
 	u32 pad = fmt->pad;
 	int ret = 0;
 
-	if (!state->is_rgb)
-		if (fmt->format.code == MEDIA_BUS_FMT_UYVY8_1X16)
-			pad = DS5_MUX_PAD_DEPTH;
-		else
-			pad = DS5_MUX_PAD_MOTION_T;
-	else
+	if (state->is_depth)
+		pad = DS5_MUX_PAD_DEPTH;
+	if (state->is_y8)
+		pad = DS5_MUX_PAD_MOTION_T;
+	if (state->is_rgb)
 		pad = DS5_MUX_PAD_RGB;
+	if (state->is_imu)
+		pad = DS5_MUX_PAD_IMU;
+	//if (!state->is_rgb)
+	//	if (fmt->format.code == MEDIA_BUS_FMT_UYVY8_1X16)
+	//		pad = DS5_MUX_PAD_DEPTH;
+	//	else
+	//		pad = DS5_MUX_PAD_MOTION_T;
+	//else
+	//	pad = DS5_MUX_PAD_RGB;
 
 	dev_info(sd->dev, "%s(): pad: %x %x: %ux%u\n", __func__, pad, fmt->format.code,
 		 fmt->format.width, fmt->format.height);
@@ -2205,6 +2304,9 @@ static int ds5_mux_set_fmt(struct v4l2_subdev *sd, struct v4l2_subdev_pad_config
 	case DS5_MUX_PAD_RGB:
 		remote_sd = &state->rgb.sensor.sd;
 		break;
+	case DS5_MUX_PAD_IMU:
+		remote_sd = &state->imu.sensor.sd;
+		break;
 	case DS5_MUX_PAD_EXTERNAL:
 		if (state->is_rgb)
 			remote_sd = &state->rgb.sensor.sd;
@@ -2239,11 +2341,14 @@ static int ds5_mux_get_fmt(struct v4l2_subdev *sd, struct v4l2_subdev_pad_config
 
 	dev_info(sd->dev, "%s(): %u %p\n", __func__, pad, state->mux.last_set);
 
-	if (state->is_rgb) {
-		tmp.pad = DS5_MUX_PAD_RGB;
+	if (state->is_depth)
+		pad = DS5_MUX_PAD_DEPTH;
+	if (state->is_y8)
+		pad = DS5_MUX_PAD_MOTION_T;
+	if (state->is_rgb)
 		pad = DS5_MUX_PAD_RGB;
-	} else
-		tmp.pad = 0;
+	if (state->is_imu)
+		pad = DS5_MUX_PAD_IMU;
 
 	switch (pad) {
 	case DS5_MUX_PAD_MOTION_T:
@@ -2258,6 +2363,9 @@ static int ds5_mux_get_fmt(struct v4l2_subdev *sd, struct v4l2_subdev_pad_config
 	case DS5_MUX_PAD_RGB:
 		remote_sd = &state->rgb.sensor.sd;
 		break;
+	case DS5_MUX_PAD_IMU:
+		remote_sd = &state->imu.sensor.sd;
+		break;
 	default:
 		return -EINVAL;
 	}
@@ -2302,6 +2410,7 @@ static int ds5_mux_s_frame_interval(struct v4l2_subdev *sd,
 	struct ds5_sensor *depth = &state->depth.sensor;
 	struct ds5_sensor *motion = &state->motion_t.sensor;
 	struct ds5_sensor *rgb = &state->rgb.sensor;
+	struct ds5_sensor *imu = &state->imu.sensor;
 
 
 	if (NULL == sd || NULL == fi)
@@ -2312,10 +2421,12 @@ static int ds5_mux_s_frame_interval(struct v4l2_subdev *sd,
 
 	if(state->is_rgb)
 		rgb->config.framerate = fi->interval.denominator;
-	else {
+	if (state->is_depth)
 		depth->config.framerate = fi->interval.denominator;
+	if (state->is_y8)
 		motion->config.framerate = fi->interval.denominator;
-	}
+	if (state->is_imu)
+		imu->config.framerate = fi->interval.denominator;
 	return 0;
 }
 
@@ -2330,6 +2441,9 @@ static int ds5_mux_s_stream(struct v4l2_subdev *sd, int on)
 
 	state->mux.last_set->streaming = on;
 
+	if (state->is_imu)
+		return 0;
+
 	if (on)
 		ret = ds5_configure(state);
 
@@ -2339,7 +2453,7 @@ static int ds5_mux_s_stream(struct v4l2_subdev *sd, int on)
 	if (!ret) {
 		if (state->is_rgb)
 			ret = ds5_write(state, 0x1000, (on ? 0x200  : 0x100 ));
-		else
+		if (state->is_depth || state->is_y8)
 			ret = ds5_write(state, 0x1000, (on ? 2 : 1));
 	}
 
@@ -2366,7 +2480,7 @@ static int ds5_mux_s_stream(struct v4l2_subdev *sd, int on)
 
 	if(on && (DS5_START_MAX_COUNT == i)) {
 		dev_err(&state->client->dev, "%s(): start streaming failed\n", __func__);
-		ret = -EAGAIN;
+		ret = EAGAIN;
 	}
 
 	dev_info(&state->client->dev, "%s(): streaming %x depth status 0x%04x, rgb status 0x%04x, rate %u\n", __func__,
@@ -2455,8 +2569,15 @@ static int ds5_mux_registered(struct v4l2_subdev *sd)
 	if (ret < 0)
 		goto e_rgb;
 
+	ret = ds5_sensor_register(state, &state->imu.sensor);
+	if (ret < 0)
+		goto e_imu;
+
 	return 0;
 
+e_imu:
+	v4l2_device_unregister_subdev(&state->rgb.sensor.sd);
+
 e_rgb:
 	v4l2_device_unregister_subdev(&state->motion_t.sensor.sd);
 
@@ -2469,6 +2590,7 @@ e_depth:
 static void ds5_mux_unregistered(struct v4l2_subdev *sd)
 {
 	struct ds5 *state = v4l2_get_subdevdata(sd);
+	ds5_sensor_remove(&state->imu.sensor);
 	ds5_sensor_remove(&state->rgb.sensor);
 	ds5_sensor_remove(&state->motion_t.sensor);
 	ds5_sensor_remove(&state->depth.sensor);
@@ -2676,6 +2798,11 @@ static int ds5_fixed_configuration(struct i2c_client *client, struct ds5 *state)
 	sensor->n_formats = DS5_RGB_N_FORMATS;
 	sensor->mux_pad = DS5_MUX_PAD_RGB;*/
 
+	sensor = &state->imu.sensor;
+	sensor->formats = ds5_imu_formats;
+	sensor->n_formats = 1;
+	sensor->mux_pad = DS5_MUX_PAD_IMU;
+
 	/* Development: set a configuration during probing */
 	if ((cfg0 & 0xff00) == 0x1800) {
 		/* MIPI CSI-2 YUV420 isn't supported by V4L, reconfigure to Y8 */
@@ -2723,6 +2850,7 @@ static int ds5_parse_cam(struct i2c_client *client, struct ds5 *state)
 	ds5_sensor_format_init(&state->depth.sensor);
 	ds5_sensor_format_init(&state->motion_t.sensor);
 	ds5_sensor_format_init(&state->rgb.sensor);
+	ds5_sensor_format_init(&state->imu.sensor);
 
 	return 0;
 }
@@ -3007,6 +3135,10 @@ static int ds5_v4l_init(struct i2c_client *c,struct ds5 *state)
 	if (ret < 0)
 		goto e_rgb;
 
+	ret = ds5_imu_init(c, state);
+	if (ret < 0)
+		goto e_imu;
+
 	ret = ds5_mux_init(c, state);
 	if (ret < 0)
 		goto e_motion_t;
@@ -3022,6 +3154,8 @@ static int ds5_v4l_init(struct i2c_client *c,struct ds5 *state)
 	return 0;
 e_mux:
 	ds5_mux_remove(state);
+e_imu:
+	media_entity_cleanup(&state->imu.sensor.sd.entity);
 e_rgb:
 	media_entity_cleanup(&state->rgb.sensor.sd.entity);
 e_motion_t:
@@ -3140,7 +3274,6 @@ static int ds5_probe(struct i2c_client *c, const struct i2c_device_id *id)
 
 	state->client = c;
 	dev_warn(&c->dev, "Probing new driver for D45x\n");
-	dev_warn(&c->dev, "Driver data NAEL %d\n", (int)id->driver_data);
 	state->variant = ds5_variants + id->driver_data;
 
 	state->vcc = devm_regulator_get(&c->dev, "vcc");
@@ -3178,6 +3311,11 @@ static int ds5_probe(struct i2c_client *c, const struct i2c_device_id *id)
 		return 0;
 	}
 
+	state->is_depth = 0;
+	state->is_y8 = 0;
+	state->is_rgb = 0;
+	state->is_imu = 0;
+
 	err = of_property_read_string(c->dev.of_node, "cam-type",
 			&str);
 	if (!err && !strncmp(str, "Depth", strlen("Depth")))
@@ -3186,6 +3324,13 @@ static int ds5_probe(struct i2c_client *c, const struct i2c_device_id *id)
 		state->is_y8 = 1;
 	if (!err && !strncmp(str, "RGB", strlen("RGB")))
 		state->is_rgb = 1;
+	if (!err && !strncmp(str, "IMU", strlen("IMU")))
+		state->is_imu = 1;
+
+	dev_info(&c->dev, "%s(): state->is_rgb %d\n", __func__, state->is_rgb);
+	dev_info(&c->dev, "%s(): state->is_depth %d\n", __func__, state->is_depth);
+	dev_info(&c->dev, "%s(): state->is_y8 %d\n", __func__, state->is_y8);
+	dev_info(&c->dev, "%s(): state->is_imu %d\n", __func__, state->is_imu);
 
 	ret = ds5_v4l_init(c, state);
 	if (ret < 0)
-- 
2.17.1

