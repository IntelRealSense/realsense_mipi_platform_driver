From 07aa9aecd15a5af224d2a4df366df6a58d9e91cc Mon Sep 17 00:00:00 2001
From: Shikun Ding <shikun.ding@intel.com>
Date: Thu, 21 Apr 2022 13:38:58 +0800
Subject: [PATCH] Fixed narrowing conversion of imu framerates

The variable type on the definition of all framerates is u16.
But in ds5_mux_s_frame_interval() and __ds5_probe_framerate(),
the framerate will be narrowed to u8. Especially for IMU, its
framerate likely exceeds the maximum value of u8.

Fixed this by changing u8 to u16.
Another change is adding 50 to imu framerates array.

Signed-off-by: Shikun Ding <shikun.ding@intel.com>
---
 drivers/media/i2c/d4xx.c | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/drivers/media/i2c/d4xx.c b/drivers/media/i2c/d4xx.c
index f4aaaa268..f1ab7b1c6 100644
--- a/drivers/media/i2c/d4xx.c
+++ b/drivers/media/i2c/d4xx.c
@@ -338,7 +338,7 @@ struct ds5_sensor {
 	struct {
 		const struct ds5_format *format;
 		const struct ds5_resolution *resolution;
-		u8 framerate;
+		u16 framerate;
 	} config;
 	bool streaming;
 	/*struct ds5_vchan *vchan;*/
@@ -511,7 +511,7 @@ static const u16 ds5_framerate_to_60[] = {5, 15, 30, 60};
 static const u16 ds5_framerate_to_90[] = {5, 15, 30, 60, 90};
 static const u16 ds5_framerate_100[] = {100};
 static const u16 ds5_framerate_90[] = {90};
-static const u16 ds5_imu_framerates[] = {100, 200, 400};
+static const u16 ds5_imu_framerates[] = {50, 100, 200, 400};
 
 static const struct ds5_resolution d43x_depth_sizes[] = {
 	{
@@ -2449,10 +2449,10 @@ static int ds5_mux_g_frame_interval(struct v4l2_subdev *sd,
 	return 0;
 }
 
-static u8 __ds5_probe_framerate(const struct ds5_resolution *res, u8 target)
+static u16 __ds5_probe_framerate(const struct ds5_resolution *res, u16 target)
 {
 	int i;
-	u8 framerate;
+	u16 framerate;
 
 	for (i = 0; i < res->n_framerates; i++) {
 		framerate = res->framerates[i];
@@ -2468,7 +2468,7 @@ static int ds5_mux_s_frame_interval(struct v4l2_subdev *sd,
 {
 	struct ds5 *state = container_of(sd, struct ds5, mux.sd.subdev);
 	struct ds5_sensor *sensor = NULL;
-	u8 framerate = 1;
+	u16 framerate = 1;
 
 	if (NULL == sd || NULL == fi || fi->interval.numerator == 0)
 		return -EINVAL;
-- 
2.17.1

