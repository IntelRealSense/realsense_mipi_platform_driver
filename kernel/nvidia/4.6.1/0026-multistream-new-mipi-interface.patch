From 63f9060742ab1daa802cae873c860cef3b4a56ce Mon Sep 17 00:00:00 2001
From: Emil Jahshan <emil.jahshan@intel.com>
Date: Sun, 23 Jan 2022 10:48:41 +0200
Subject: [PATCH] multistream new mipi interface

 - this fix is for DSO-18033
 - note that this fix alone doesn solve the issue
 - changed the mipi interface, IR is now on different register than DEPTH
 - version 1.0.0.8

Signed-off-by: Emil Jahshan <emil.jahshan@intel.com>
---
 drivers/media/i2c/d4xx.c | 235 +++++++++++++++++++++++----------------
 1 file changed, 137 insertions(+), 98 deletions(-)

diff --git a/drivers/media/i2c/d4xx.c b/drivers/media/i2c/d4xx.c
index 78de6aafc..088df4bc5 100644
--- a/drivers/media/i2c/d4xx.c
+++ b/drivers/media/i2c/d4xx.c
@@ -48,18 +48,22 @@
 	#define DS5_DEVICE_TYPE_D45X		6
 	#define DS5_DEVICE_TYPE_D43X		5
 	#define DS5_DEVICE_TYPE_D46X		4
-#define DS5_DEPTH_Y_STREAMS_DT		0x4000
-#define DS5_DEPTH_Y_STREAMS_MD		0x4002
+#define DS5_START_STOP_STREAM	0x1000
+#define DS5_DEPTH_STREAM_DT		0x4000
+#define DS5_DEPTH_STREAM_MD		0x4002
 #define DS5_DEPTH_RES_WIDTH		0x4004
 #define DS5_DEPTH_RES_HEIGHT		0x4008
-#define DS5_DEPTH_Y_FPS			0x400C
-#define DS5_Y_RES_WIDTH			0x4010
-#define DS5_Y_RES_HEIGHT		0x4014
+#define DS5_DEPTH_FPS			0x400C
 #define DS5_RGB_STREAM_DT		0x4020
 #define DS5_RGB_STREAM_MD		0x4022
 #define DS5_RGB_RES_WIDTH		0x4024
 #define DS5_RGB_RES_HEIGHT		0x4028
 #define DS5_RGB_FPS			0x402C
+#define DS5_IR_STREAM_DT	0x4080
+#define DS5_IR_STREAM_MD	0x4082
+#define DS5_IR_RES_WIDTH	0x4084
+#define DS5_IR_RES_HEIGHT	0x4088
+#define DS5_IR_FPS			0x408C
 
 #define DS5_DEPTH_CONTROL_BASE		0x4100
 #define DS5_RGB_CONTROL_BASE		0x4200
@@ -997,64 +1001,64 @@ static int ds5_configure(struct ds5 *state)
 	u8 rgbfmt = rgb->streaming ? rgb->config.format->data_type : 0;
 	int ret;
 
-	if (state->is_depth || state->is_y8) { // TODO: remove
-		u16 streaming, depth_status, rgb_status;
-		if (!dfmt && !mfmt && !rgbfmt)
-			return -EINVAL;
-
-		ds5_read(state, 0x1004, &streaming);
-		ds5_read(state, 0x4800, &depth_status);
-		ds5_read(state, DS5_DEPTH_Y_STREAMS_DT, &rgb_status);
-		ret = ds5_write(state, DS5_DEPTH_Y_STREAMS_DT, dfmt | (mfmt << 8));
+	// IR Camera
+	if (state->is_y8) {
+		ret = ds5_write(state, DS5_IR_STREAM_DT, mfmt);
 		if (ret < 0)
 			return ret;
 
-		ret = ds5_write(state, DS5_DEPTH_Y_STREAMS_MD, 0x2012);
+		ret = ds5_write(state, DS5_IR_STREAM_MD, 0x212);
 		if (ret < 0)
 			return ret;
-
-		if (state->is_depth && depth->streaming) {
-			// TODO: remove if 0x31 DT is supported
-			//       this will configure FW to override DT in mipi header to
-			//       0x1E for depth, since DT 0x31 is not supported
-			//       in Jetson
-			//if (dfmt) {
-				ret = ds5_write(state, 0x401C, 0x1E);
-			//	if (ret < 0)
-			//		return ret;
-			//} else {
-			//	ret = ds5_write(state, 0x401C, mfmt);
-			//	if (ret < 0)
-			//		return ret;
-			//}
-
-			ret = ds5_write(state, DS5_DEPTH_Y_FPS, depth->config.framerate);
+
+		if (state->is_y8 && motion_t->streaming) {
+			ret = ds5_write(state, 0x401C, mfmt);
 			if (ret < 0)
 				return ret;
 
-			ret = ds5_write(state, DS5_DEPTH_RES_WIDTH, depth->config.resolution->width);
+			// FPS
+			ret = ds5_write(state, DS5_IR_FPS, motion_t->config.framerate);
 			if (ret < 0)
 				return ret;
 
-			ret = ds5_write(state, DS5_DEPTH_RES_HEIGHT, depth->config.resolution->height);
+			// WIDTH
+			ret = ds5_write(state, DS5_IR_RES_WIDTH, motion_t->config.resolution->width);
 			if (ret < 0)
 				return ret;
-		}
 
-		if (state->is_y8 && motion_t->streaming) {
-			ret = ds5_write(state, 0x401C, mfmt);
+			// HEIGHT
+			ret = ds5_write(state, DS5_IR_RES_HEIGHT, motion_t->config.resolution->height);
 			if (ret < 0)
 				return ret;
+		}
+	}
+
+	// DEPTH Camera
+	if (state->is_depth) {
+		ret = ds5_write(state, DS5_DEPTH_STREAM_DT, dfmt);
+		if (ret < 0)
+			return ret;
+
+		ret = ds5_write(state, DS5_DEPTH_STREAM_MD, 0x12);
+		if (ret < 0)
+			return ret;
+
+		if (state->is_depth && depth->streaming) {
+			// override output DT to 0x1E, since 0x31 is not supported in Jetson
+			ret = ds5_write(state, 0x401C, 0x1E);
 
-			ret = ds5_write(state, DS5_DEPTH_Y_FPS, motion_t->config.framerate);
+			// FPS
+			ret = ds5_write(state, DS5_DEPTH_FPS, depth->config.framerate);
 			if (ret < 0)
 				return ret;
 
-			ret = ds5_write(state, DS5_Y_RES_WIDTH, motion_t->config.resolution->width);
+			// WIDTH
+			ret = ds5_write(state, DS5_DEPTH_RES_WIDTH, depth->config.resolution->width);
 			if (ret < 0)
 				return ret;
 
-			ret = ds5_write(state, DS5_Y_RES_HEIGHT, motion_t->config.resolution->height);
+			// HEIGHT
+			ret = ds5_write(state, DS5_DEPTH_RES_HEIGHT, depth->config.resolution->height);
 			if (ret < 0)
 				return ret;
 		}
@@ -1232,7 +1236,7 @@ static int ds5_hw_set_exposure(struct ds5 *state, u32 val)
 #define DS5_MAX_LOG_POLL (DS5_MAX_LOG_WAIT / DS5_MAX_LOG_SLEEP)
 
 // TODO: why to use DS5_DEPTH_Y_STREAMS_DT?
-#define DS5_CAMERA_CID_BASE	(V4L2_CTRL_CLASS_CAMERA | DS5_DEPTH_Y_STREAMS_DT)
+#define DS5_CAMERA_CID_BASE	(V4L2_CTRL_CLASS_CAMERA | DS5_DEPTH_STREAM_DT)
 
 #define DS5_CAMERA_CID_LOG			(DS5_CAMERA_CID_BASE+0)
 #define DS5_CAMERA_CID_LASER_POWER		(DS5_CAMERA_CID_BASE+1)
@@ -2442,13 +2446,9 @@ static int ds5_mux_s_frame_interval(struct v4l2_subdev *sd,
 static int ds5_mux_s_stream(struct v4l2_subdev *sd, int on)
 {
 	struct ds5 *state = container_of(sd, struct ds5, mux.sd.subdev);
-	u16 streaming, rate, depth_status, rgb_status;
+	u16 streaming, status, depth_status, ir_status, rgb_status;
 	int ret = 0;
 	unsigned int i = 0;
-	/*const*/ struct ds5_sensor *depth = &state->depth.sensor;
-	/*const*/ struct ds5_sensor *motion_t = &state->motion_t.sensor;
-	u8 dfmt = depth->streaming ? 0x31 : 0;
-	u8 mfmt = motion_t->streaming ? motion_t->config.format->data_type : 0;
 
 	dev_info(&state->client->dev, "%s(): %s on = %d\n", __func__, state->mux.last_set->sd.name, on);
 
@@ -2460,60 +2460,98 @@ static int ds5_mux_s_stream(struct v4l2_subdev *sd, int on)
 	if (on) {
 		dev_info(&state->client->dev, "%s(): starting stream\n", __func__);
 		ret = ds5_configure(state);
+
+		// TODO: remove, workaround for FW crash in start
+		msleep_range(100);
+
+		if (!ret) {
+			// start IR
+			if (state->is_y8) {
+				dev_info(&state->client->dev, "%s(): starting IR stream\n", __func__);
+				ret = ds5_write(state, DS5_START_STOP_STREAM, 0x204);
+				if (ret < 0)
+					return ret;
+			}
+
+			// start DEPTH
+			if (state->is_depth) {
+				dev_info(&state->client->dev, "%s(): starting DEPTH stream\n", __func__);
+				ret = ds5_write(state, DS5_START_STOP_STREAM, 0x200);
+				if (ret < 0)
+					return ret;
+			}
+
+			// start RGB
+			if (state->is_rgb) {
+				dev_info(&state->client->dev, "%s(): starting RGB stream\n", __func__);
+				ret = ds5_write(state, DS5_START_STOP_STREAM, 0x201);
+				if (ret < 0)
+					return ret;
+			}
+
+			// check streaming status from FW
+			for (i = 0; i < DS5_START_MAX_COUNT; i++) {
+				if (state->is_depth) {
+					ds5_read(state, 0x1004, &streaming);
+					ds5_read(state, 0x4800, &status);
+					if (status == 1 && streaming == 2) break;
+				}
+				if (state->is_y8) {
+					ds5_read(state, 0x1014, &streaming);
+					ds5_read(state, 0x4808, &status);
+					if (status == 1 && streaming == 2) break;
+				}
+				if (state->is_rgb) {
+					ds5_read(state, 0x1008, &streaming);
+					ds5_read(state, 0x4802, &status);
+					if (status == 1 && streaming == 2) break;
+				}
+
+				msleep_range(DS5_START_POLL_TIME);
+			}
+
+			if(on && (DS5_START_MAX_COUNT == i)) {
+				dev_err(&state->client->dev, "%s(): start streaming failed\n", __func__);
+				ret = EAGAIN;
+			}
+		}
 	} else {
 		dev_info(&state->client->dev, "%s(): stopping stream\n", __func__);
 
+		// TODO: remove, workaround for FW crash in start
+		msleep_range(100);
+
+		// stop IR
 		if (state->is_y8) {
 			dev_info(&state->client->dev, "%s(): stopping IR stream\n", __func__);
-			ret = ds5_write(state, DS5_DEPTH_Y_STREAMS_DT, (mfmt << 8));
+			ret = ds5_write(state, DS5_START_STOP_STREAM, 0x104);
 			if (ret < 0)
 				return ret;
-		} else {
+		}
+
+		// stop DEPTH
+		if (state->is_depth) {
 			dev_info(&state->client->dev, "%s(): stopping DEPTH stream\n", __func__);
-			ret = ds5_write(state, DS5_DEPTH_Y_STREAMS_DT, dfmt);
+			ret = ds5_write(state, DS5_START_STOP_STREAM, 0x100);
 			if (ret < 0)
 				return ret;
 		}
-	}
-
-	// TODO: remove, workaround for FW crash in start
-	msleep_range(100);
 
-	if (!ret) {
-		if (state->is_rgb)
-			ret = ds5_write(state, 0x1000, (on ? 0x200  : 0x100 ));
-		if (state->is_depth || state->is_y8)
-			ret = ds5_write(state, 0x1000, (on ? 2 : 1));
-	}
-
-	if (on) {
-		// TODO: this read seems to cause FW crash, need to debug
-		//ds5_read(state, 0x402, &rate);
-		rate = 0;
-
-		for (i = 0; i < DS5_START_MAX_COUNT; i++) {
-			ds5_read(state, 0x1004, &streaming);
-			ds5_read(state, 0x4800, &depth_status);
-			ds5_read(state, 0x4802, &rgb_status);
-			if ((!state->is_rgb) && ((streaming & 0xFF) == 2) && (depth_status == 1))
-				break;
-			if ((state->is_rgb) && ((streaming & 0xF00) == ((2 << 8))) && (rgb_status == 1))
-				break;
-			msleep_range(DS5_START_POLL_TIME);
+		// stop RGB
+		if (state->is_depth) {
+			dev_info(&state->client->dev, "%s(): stopping RGB stream\n", __func__);
+			ret = ds5_write(state, DS5_START_STOP_STREAM, 0x101);
+			if (ret < 0)
+				return ret;
 		}
-	} else {
-		ds5_read(state, 0x1004, &streaming);
-		ds5_read(state, 0x4800, &depth_status);
-		ds5_read(state, 0x4802, &rgb_status);
 	}
 
-	if(on && (DS5_START_MAX_COUNT == i)) {
-		dev_err(&state->client->dev, "%s(): start streaming failed\n", __func__);
-		ret = EAGAIN;
-	}
+	ds5_read(state, 0x4800, &depth_status);
+	ds5_read(state, 0x4802, &rgb_status);
+	ds5_read(state, 0x4808, &ir_status);
 
-	dev_info(&state->client->dev, "%s(): streaming %x depth status 0x%04x, rgb status 0x%04x, rate %u\n", __func__,
-		 streaming, depth_status, rgb_status, rate);
+	dev_info(&state->client->dev, "%s(): streaming %x depth status 0x%04x, ir status 0x%04x, rgb status 0x%04x\n", __func__,
+		 streaming, depth_status, ir_status, rgb_status);
 
 	return ret;
 }
@@ -2738,33 +2776,34 @@ e_entity:
 static int ds5_fixed_configuration(struct i2c_client *client, struct ds5 *state)
 {
 	struct ds5_sensor *sensor;
-	u16 cfg0, cfg1, dw, dh, yw, yh, dev_type;
+	u16 cfg0, cfg0_md, cfg1, cfg1_md, dw, dh, yw, yh, dev_type;
 	int ret;
 
-	ret = ds5_read(state, DS5_DEPTH_Y_STREAMS_DT, &cfg0);
+	ret = ds5_read(state, DS5_DEPTH_STREAM_DT, &cfg0);
 	if (!ret)
-		ret = ds5_read(state, DS5_DEPTH_Y_STREAMS_MD, &cfg1);
+		ret = ds5_read(state, DS5_DEPTH_STREAM_MD, &cfg0_md);
 	if (!ret)
 		ret = ds5_read(state, DS5_DEPTH_RES_WIDTH, &dw);
 	if (!ret)
 		ret = ds5_read(state, DS5_DEPTH_RES_HEIGHT, &dh);
 	if (!ret)
-		ret = ds5_read(state, DS5_Y_RES_WIDTH, &yw);
+		ret = ds5_read(state, DS5_IR_STREAM_DT, &cfg1);
+	if (!ret)
+		ret = ds5_read(state, DS5_IR_STREAM_MD, &cfg1_md);
 	if (!ret)
-		ret = ds5_read(state, DS5_Y_RES_HEIGHT, &yh);
+		ret = ds5_read(state, DS5_IR_RES_WIDTH, &yw);
+	if (!ret)
+		ret = ds5_read(state, DS5_IR_RES_HEIGHT, &yh);
 	if (!ret)
 		ret = ds5_read(state, DS5_DEVICE_TYPE, &dev_type);
 	if (ret < 0)
 		return ret;
 
-	dev_info(&client->dev, "%s(): cfg0 %x %ux%u cfg1 %x %ux%u\n", __func__,
-		 cfg0, dw, dh, cfg1, yw, yh);
-
-	//if (cfg0 & 0xff)
-		//state->depth.sensor.streaming = true;
-
-	//if (cfg0 & 0xff00)
-	//	state->motion_t.sensor.streaming = true;
+	dev_info(&client->dev, "%s(): cfg0 %x %ux%u cfg0_md %x %ux%u\n", __func__,
+		 cfg0, dw, dh, cfg0_md, yw, yh);
+
+	dev_info(&client->dev, "%s(): cfg1 %x %ux%u cfg1_md %x %ux%u\n", __func__,
+		 cfg1, dw, dh, cfg1_md, yw, yh);
 
 	sensor = &state->depth.sensor;
 	switch (dev_type) {
@@ -3422,4 +3461,4 @@ module_i2c_driver(ds5_i2c_driver);
 MODULE_DESCRIPTION("Intel D4XX camera driver");
 MODULE_AUTHOR("Emil Jahshan (emil.jahshan@intel.com)");
 MODULE_LICENSE("GPL v2");
-MODULE_VERSION("1.0.0.7");
+MODULE_VERSION("1.0.0.8");
-- 
2.17.1

