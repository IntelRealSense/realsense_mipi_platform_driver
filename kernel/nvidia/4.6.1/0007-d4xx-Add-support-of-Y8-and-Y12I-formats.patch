From 2a8d613b8394f4fce50a488f7c4acec9919f1bab Mon Sep 17 00:00:00 2001
From: Nael Masalha <nael.masalha@intel.com>
Date: Tue, 17 Dec 2019 19:46:30 +0200
Subject: [PATCH] d4xx: Add support of Y8 and Y12I formats

 - Y8 and Y12I are exposed on the same node of Z16
 - Remove res 2000x1500 from YUYV format

Signed-off-by: Nael Masalha <nael.masalha@intel.com>
---
 drivers/media/i2c/d4xx.c                      | 100 +++++++-----------
 .../platform/tegra/camera/vi/vi4_formats.h    |   4 +-
 2 files changed, 39 insertions(+), 65 deletions(-)

diff --git a/drivers/media/i2c/d4xx.c b/drivers/media/i2c/d4xx.c
index ebf983c11..78b39410b 100644
--- a/drivers/media/i2c/d4xx.c
+++ b/drivers/media/i2c/d4xx.c
@@ -483,11 +483,6 @@ static const struct ds5_resolution ds5_rgb_sizes[] = {
 		.height = 1080,
 		.framerates = ds5_framerates,
 		.n_framerates = ARRAY_SIZE(ds5_framerates),
-	},  {
-		.width = 2000,
-		.height = 1500,
-		.framerates = ds5_framerates,
-		.n_framerates = ARRAY_SIZE(ds5_framerates),
 	},
 };
 
@@ -504,12 +499,6 @@ static const struct ds5_resolution d43x_calibration_sizes[] = {
 		.height = 800,
 		.framerates = ds5_framerate_15_30,
 		.n_framerates = ARRAY_SIZE(ds5_framerate_15_30),
-	}, {
-		.width =  640,
-		.height = 800,
-		.framerates = ds5_framerate_15_30,
-		.n_framerates = ARRAY_SIZE(ds5_framerate_15_30),
-
 	},
 };
 
@@ -522,13 +511,6 @@ static const struct ds5_resolution d46x_calibration_sizes[] = {
 	},
 };
 
-static struct ds5_resolution ds5_size_calibration_wide = {
-	.width =  1280,
-	.height = 800,
-	.framerates = &ds5_framerate_25,
-	.n_framerates = 1,
-};
-
 static const struct ds5_format ds5_depth_formats_d43x[] = {
 	{
 		// TODO: 0x31 is replaced with 0x1e since it caused low FPS in Jetson.
@@ -536,6 +518,16 @@ static const struct ds5_format ds5_depth_formats_d43x[] = {
 		.mbus_code = MEDIA_BUS_FMT_UYVY8_1X16,
 		.n_resolutions = ARRAY_SIZE(d43x_depth_sizes),
 		.resolutions = d43x_depth_sizes,
+	}, {
+		.data_type = 0x2a,	/* Y8 */
+		.mbus_code = MEDIA_BUS_FMT_Y8_1X8,
+		.n_resolutions = ARRAY_SIZE(d43x_depth_sizes),
+		.resolutions = d43x_depth_sizes,
+	}, {
+		.data_type = 0x24,	/* 24-bit Calibration */
+		.mbus_code = MEDIA_BUS_FMT_RGB888_1X24,	/* FIXME */
+		.n_resolutions = ARRAY_SIZE(d43x_calibration_sizes),
+		.resolutions = d43x_calibration_sizes,
 	},
 };
 
@@ -546,50 +538,34 @@ static const struct ds5_format ds5_depth_formats_d46x[] = {
 		.mbus_code = MEDIA_BUS_FMT_UYVY8_1X16,
 		.n_resolutions = ARRAY_SIZE(d46x_depth_sizes),
 		.resolutions = d46x_depth_sizes,
+	}, {
+		/* First format: default */
+		.data_type = 0x2a,	/* Y8 */
+		.mbus_code = MEDIA_BUS_FMT_Y8_1X8,
+		.n_resolutions = ARRAY_SIZE(d46x_depth_sizes),
+		.resolutions = d46x_depth_sizes,
+	}, {
+		.data_type = 0x24,	/* 24-bit Calibration */
+		.mbus_code = MEDIA_BUS_FMT_RGB888_1X24,	/* FIXME */
+		.n_resolutions = ARRAY_SIZE(d46x_calibration_sizes),
+		.resolutions = d46x_calibration_sizes,
 	},
 };
 
 #define DS5_DEPTH_N_FORMATS 1
 
 static const struct ds5_format ds5_y_formats_ds5u[] = {
-		{
-				.data_type = 0x1e,	/* UYVY */
-				.mbus_code = MEDIA_BUS_FMT_UYVY8_2X8,
-				.n_resolutions = ARRAY_SIZE(ds5_sizes),
-				.resolutions = ds5_sizes,
-			},
-};
-
-static struct ds5_format ds5_y_formats_asr[] = {
 	{
-		.data_type = 0x1e,	/* UYVY */
-		.mbus_code = MEDIA_BUS_FMT_UYVY8_2X8,
-		.n_resolutions = ARRAY_SIZE(ds5_sizes),
-		.resolutions = ds5_sizes,
-	},
-};
-
-static const struct ds5_format ds5_y_formats_awg[] = {
-	{
-		.data_type = 0x1e,	/* UYVY */
-		.mbus_code = MEDIA_BUS_FMT_UYVY8_2X8,
-		.n_resolutions = ARRAY_SIZE(ds5_sizes),
-		.resolutions = ds5_sizes,
-	}, {
+		/* First format: default */
 		.data_type = 0x2a,	/* Y8 */
 		.mbus_code = MEDIA_BUS_FMT_Y8_1X8,
 		.n_resolutions = ARRAY_SIZE(ds5_sizes),
 		.resolutions = ds5_sizes,
 	}, {
-		.data_type = 0x30,	/* 24-bit Calibration */
-		.mbus_code = MEDIA_BUS_FMT_FIXED,	/* FIXME */
-		.n_resolutions = 1,
-		.resolutions = &ds5_size_calibration_wide,
-	}, {
-		.data_type = 0x32,	/* 16-bit RY8_LY8 Calibration */
-		.mbus_code = MEDIA_BUS_FMT_UYVY8_1X16,
-		.n_resolutions = ARRAY_SIZE(ds5_sizes),
-		.resolutions = ds5_sizes,
+		.data_type = 0x24,	/* 24-bit Calibration */
+		.mbus_code = MEDIA_BUS_FMT_RGB888_1X24,	/* FIXME */
+		.n_resolutions = ARRAY_SIZE(d46x_calibration_sizes),
+		.resolutions = d46x_calibration_sizes,
 	},
 };
 
@@ -606,14 +582,6 @@ static const struct ds5_variant ds5_variants[] = {
 		.formats = ds5_y_formats_ds5u,
 		.n_formats = ARRAY_SIZE(ds5_y_formats_ds5u),
 	},
-	[DS5_ASR] = {
-		.formats = ds5_y_formats_asr,
-		.n_formats = ARRAY_SIZE(ds5_y_formats_asr),
-	},
-	[DS5_AWG] = {
-		.formats = ds5_y_formats_awg,
-		.n_formats = ARRAY_SIZE(ds5_y_formats_awg),
-	},
 };
 
 static const struct v4l2_mbus_framefmt ds5_mbus_framefmt_template = {
@@ -883,9 +851,15 @@ static int ds5_configure(struct ds5 *state)
 		//       this will configure FW to override DT in mipi header to
 		//       0x1E for depth, since DT 0x31 is not supported
 		//       in Jetson
-		ret = ds5_write(state, 0x401C, 0x1E);
-		if (ret < 0)
-			return ret;
+		if (dfmt) {
+			ret = ds5_write(state, 0x401C, 0x1E);
+			if (ret < 0)
+				return ret;
+		} else {
+			ret = ds5_write(state, 0x401C, mfmt);
+			if (ret < 0)
+				return ret;
+		}
 
 		ret = ds5_write(state, DS5_DEPTH_Y_FPS, depth->config.framerate);
 		if (ret < 0)
@@ -2529,7 +2503,7 @@ static int ds5_fixed_configuration(struct i2c_client *client, struct ds5 *state)
 	default:
 		sensor->formats = ds5_depth_formats_d46x;
 	}
-	sensor->n_formats = DS5_DEPTH_N_FORMATS;
+	sensor->n_formats = 3;
 	sensor->mux_pad = DS5_MUX_PAD_DEPTH;
 
 	sensor = &state->motion_t.sensor;
@@ -3128,4 +3102,4 @@ module_i2c_driver(ds5_i2c_driver);
 MODULE_DESCRIPTION("Intel D4XX camera driver");
 MODULE_AUTHOR("Guennadi Liakhovetski (guennadi.liakhovetski@intel.com)");
 MODULE_LICENSE("GPL v2");
-MODULE_VERSION("0.49.4.0");
+MODULE_VERSION("0.51.1.0");
diff --git a/drivers/media/platform/tegra/camera/vi/vi4_formats.h b/drivers/media/platform/tegra/camera/vi/vi4_formats.h
index ab90aae92..6f8b1fac7 100644
--- a/drivers/media/platform/tegra/camera/vi/vi4_formats.h
+++ b/drivers/media/platform/tegra/camera/vi/vi4_formats.h
@@ -120,8 +120,8 @@ static const struct tegra_video_format vi4_video_formats[] = {
 				RAW12, SBGGR12, "BGBG.. GRGR.."),
 
 	/* RGB888 */
-	TEGRA_VIDEO_FORMAT(RGB888, 24, RGB888_1X24, 4, 1, T_A8R8G8B8,
-				RGB888, ABGR32, "BGRA-8-8-8-8"),
+	//TEGRA_VIDEO_FORMAT(RGB888, 24, RGB888_1X24, 4, 1, T_A8R8G8B8,
+	//			RGB888, ABGR32, "BGRA-8-8-8-8"),
 	TEGRA_VIDEO_FORMAT(RGB888, 24, RGB888_1X32_PADHI, 4, 1, T_A8B8G8R8,
 				RGB888, RGB32, "RGB-8-8-8-8"),
 
-- 
2.17.1

