From 630ddaafd69868b8360e06e351a466f0fa0d6971 Mon Sep 17 00:00:00 2001
From: Xin Zhang <xin.x.zhang@intel.com>
Date: Wed, 19 Jan 2022 09:56:22 +0800
Subject: [PATCH] Fix depth/color metadata corruption issue

Set up per channel DMA buffer for metadata instead of using the original
one in tegra_mc_vi. Previously the depth metadata directly uses the DMA
buffer in tegra_mc_vi for embedded, then later when enabling the color
metadata it still uses the same structure.

Signed-off-by: Xin Zhang <xin.x.zhang@intel.com>
---
 .../media/platform/tegra/camera/vi/channel.c  |  8 +++----
 .../media/platform/tegra/camera/vi/vi4_fops.c | 23 +++++++++---------
 .../media/platform/tegra/camera/vi/vi5_fops.c | 24 +++++++++----------
 include/media/mc_common.h                     |  7 +++---
 4 files changed, 32 insertions(+), 30 deletions(-)

diff --git a/drivers/media/platform/tegra/camera/vi/channel.c b/drivers/media/platform/tegra/camera/vi/channel.c
index 9a48e0aa1..bc3f92a60 100644
--- a/drivers/media/platform/tegra/camera/vi/channel.c
+++ b/drivers/media/platform/tegra/camera/vi/channel.c
@@ -2757,11 +2757,11 @@ int tegra_channel_cleanup_video(struct tegra_channel *chan)
 int tegra_channel_cleanup(struct tegra_channel *chan)
 {
 	/* release embedded data buffer */
-	if (chan->vi->emb_buf_size > 0) {
+	if (chan->vi->emb_buf_size[chan->id] > 0) {
 		dma_free_coherent(chan->vi->dev,
-			chan->vi->emb_buf_size,
-			chan->vi->emb_buf_addr, chan->vi->emb_buf);
-		chan->vi->emb_buf_size = 0;
+			chan->vi->emb_buf_size[chan->id],
+			chan->vi->emb_buf_addr[chan->id], chan->vi->emb_buf[chan->id]);
+		chan->vi->emb_buf_size[chan->id] = 0;
 		vb2_queue_release(&chan->embedded.queue);
 #if defined(CONFIG_VIDEOBUF2_DMA_CONTIG)
 		tegra_vb2_dma_cleanup(chan->vi->dev, chan->embedded.alloc_ctx,
diff --git a/drivers/media/platform/tegra/camera/vi/vi4_fops.c b/drivers/media/platform/tegra/camera/vi/vi4_fops.c
index 408f95fdc..416b6643c 100644
--- a/drivers/media/platform/tegra/camera/vi/vi4_fops.c
+++ b/drivers/media/platform/tegra/camera/vi/vi4_fops.c
@@ -248,9 +248,9 @@ static void tegra_channel_surface_setup(
 
 	if (chan->embedded.height > 0) {
 		vi4_channel_write(chan, vnc_id, ATOMP_EMB_SURFACE_OFFSET0,
-						  chan->vi->emb_buf);
+						  chan->vi->emb_buf[chan->id]);
 		vi4_channel_write(chan, vnc_id, ATOMP_EMB_SURFACE_OFFSET0_H,
-					  (chan->vi->emb_buf) >> 32 & 0xFF);
+					  (chan->vi->emb_buf[chan->id]) >> 32 & 0xFF);
 	} else {
 		vi4_channel_write(chan, vnc_id, ATOMP_EMB_SURFACE_OFFSET0, 0);
 		vi4_channel_write(chan, vnc_id, ATOMP_EMB_SURFACE_OFFSET0_H, 0x0);
@@ -1053,29 +1053,30 @@ static int vi4_channel_start_streaming(struct vb2_queue *vq, u32 count)
 		}
 
 		/* Allocate buffer for Embedded Data if need to*/
-		if (emb_buf_size > chan->vi->emb_buf_size) {
+		if (emb_buf_size > chan->vi->emb_buf_size[chan->id]) {
 			/*
 			 * if old buffer is smaller than what we need,
 			 * release the old buffer and re-allocate a bigger
 			 * one below
 			 */
-			if (chan->vi->emb_buf_size > 0) {
+			if (chan->vi->emb_buf_size[chan->id] > 0) {
 				dma_free_coherent(chan->vi->dev,
-					chan->vi->emb_buf_size,
-					chan->vi->emb_buf_addr, chan->vi->emb_buf);
-				chan->vi->emb_buf_size = 0;
+					chan->vi->emb_buf_size[chan->id],
+					chan->vi->emb_buf_addr[chan->id],
+					chan->vi->emb_buf[chan->id]);
+				chan->vi->emb_buf_size[chan->id] = 0;
 			}
 
-			chan->vi->emb_buf_addr =
+			chan->vi->emb_buf_addr[chan->id] =
 				dma_alloc_coherent(chan->vi->dev,
 					emb_buf_size,
-					&chan->vi->emb_buf, GFP_KERNEL);
-			if (!chan->vi->emb_buf_addr) {
+					&chan->vi->emb_buf[chan->id], GFP_KERNEL);
+			if (!chan->vi->emb_buf_addr[chan->id]) {
 				dev_err(&chan->video->dev,
 						"Can't allocate memory for embedded data\n");
 				goto error_capture_setup;
 			}
-			chan->vi->emb_buf_size = emb_buf_size;
+			chan->vi->emb_buf_size[chan->id] = emb_buf_size;
 		}
 	}
 
diff --git a/drivers/media/platform/tegra/camera/vi/vi5_fops.c b/drivers/media/platform/tegra/camera/vi/vi5_fops.c
index 1b11bd1bc..fd3d19566 100644
--- a/drivers/media/platform/tegra/camera/vi/vi5_fops.c
+++ b/drivers/media/platform/tegra/camera/vi/vi5_fops.c
@@ -314,7 +314,7 @@ static void vi5_setup_surface(struct tegra_channel *chan,
 		desc->ch_cfg.frame.embed_y = chan->embedded.height;
 
 		desc_memoryinfo->surface[VI_ATOMP_SURFACE_EMBEDDED].base_address
-			= chan->vi->emb_buf;
+			= chan->vi->emb_buf[chan->id];
 		desc_memoryinfo->surface[VI_ATOMP_SURFACE_EMBEDDED].size
 			= desc->ch_cfg.frame.embed_x * desc->ch_cfg.frame.embed_y;
 
@@ -353,7 +353,7 @@ static void vi5_release_buffer(struct tegra_channel *chan,
 		if(evb) {
 			frm_buffer = vb2_plane_vaddr(evb, 0);
 			if(frm_buffer != NULL) {
-				memcpy(frm_buffer,chan->vi->emb_buf_addr,256);
+				memcpy(frm_buffer,chan->vi->emb_buf_addr[chan->id], 256);
 			}
 		}
 	}
@@ -792,31 +792,31 @@ static int vi5_channel_start_streaming(struct vb2_queue *vq, u32 count)
 				}
 
 				/* Allocate buffer for Embedded Data if need to*/
-				if (emb_buf_size > chan->vi->emb_buf_size) {
+				if (emb_buf_size > chan->vi->emb_buf_size[chan->id]) {
 					/*
 					 * if old buffer is smaller than what we need,
 					 * release the old buffer and re-allocate a
 					 * bigger one below.
 					 */
-					if (chan->vi->emb_buf_size > 0) {
+					if (chan->vi->emb_buf_size[chan->id] > 0) {
 						dma_free_coherent(chan->vi->dev,
-							chan->vi->emb_buf_size,
-							chan->vi->emb_buf_addr,
-							chan->vi->emb_buf);
-						chan->vi->emb_buf_size = 0;
+							chan->vi->emb_buf_size[chan->id],
+							chan->vi->emb_buf_addr[chan->id],
+							chan->vi->emb_buf[chan->id]);
+						chan->vi->emb_buf_size[chan->id] = 0;
 					}
 
-					chan->vi->emb_buf_addr =
+					chan->vi->emb_buf_addr[chan->id] =
 						dma_alloc_coherent(chan->vi->dev,
 							emb_buf_size,
-							&chan->vi->emb_buf, GFP_KERNEL);
-					if (!chan->vi->emb_buf_addr) {
+							&chan->vi->emb_buf[chan->id], GFP_KERNEL);
+					if (!chan->vi->emb_buf_addr[chan->id]) {
 						dev_err(&chan->video->dev,
 								"Can't allocate memory"
 								"for embedded data\n");
 						goto err_setup;
 					}
-					chan->vi->emb_buf_size = emb_buf_size;
+					chan->vi->emb_buf_size[chan->id] = emb_buf_size;
 				}
 			}
 
diff --git a/include/media/mc_common.h b/include/media/mc_common.h
index 6c5779b1d..de6c95435 100644
--- a/include/media/mc_common.h
+++ b/include/media/mc_common.h
@@ -41,6 +41,7 @@
 #define	ENABLE		1
 #define	DISABLE		0
 #define MAX_SYNCPT_PER_CHANNEL	3
+#define MAX_CHANNELS 6
 
 #define CAPTURE_MIN_BUFFERS	1U
 #define CAPTURE_MAX_BUFFERS	240U
@@ -340,9 +341,9 @@ struct tegra_mc_vi {
 
 	const struct tegra_vi_fops *fops;
 
-	dma_addr_t emb_buf;
-	void *emb_buf_addr;
-	unsigned int emb_buf_size;
+	dma_addr_t emb_buf[MAX_CHANNELS];
+	void *emb_buf_addr[MAX_CHANNELS];
+	unsigned int emb_buf_size[MAX_CHANNELS];
 };
 
 int tegra_vi_get_port_info(struct tegra_channel *chan,
-- 
2.17.1

