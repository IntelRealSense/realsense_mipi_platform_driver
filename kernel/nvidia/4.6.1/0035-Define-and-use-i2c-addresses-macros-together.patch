From d4eccda03eebc5a9395835ba2f3240ded9a3b8ba Mon Sep 17 00:00:00 2001
From: Xin Zhang <xin.x.zhang@intel.com>
Date: Wed, 2 Mar 2022 13:17:15 +0800
Subject: [PATCH] Define and use i2c addresses macros together

Define and use macros in functions instead of hardcode;
Add IMU addresses.

Signed-off-by: Xin Zhang <xin.x.zhang@intel.com>
---
 drivers/media/i2c/d4xx.c | 141 +++++++++++++++++++++++++--------------
 1 file changed, 92 insertions(+), 49 deletions(-)

diff --git a/drivers/media/i2c/d4xx.c b/drivers/media/i2c/d4xx.c
index cc373ed6b..e6fcb417c 100644
--- a/drivers/media/i2c/d4xx.c
+++ b/drivers/media/i2c/d4xx.c
@@ -42,46 +42,91 @@
 #define DS5_DRIVER_NAME_CLASS "d4xx-class"
 #define DS5_DRIVER_NAME_DFU "d4xx-dfu"
 
+#define DS5_MIPI_SUPPORT_LINES		0x0300
+#define DS5_MIPI_SUPPORT_PHY		0x0304
+#define DS5_MIPI_DATARATE_MIN		0x0308
+#define DS5_MIPI_DATARATE_MAX		0x030A
 #define DS5_FW_VERSION			0x030C
 #define DS5_FW_BUILD			0x030E
 #define DS5_DEVICE_TYPE			0x0310
-	#define DS5_DEVICE_TYPE_D45X		6
-	#define DS5_DEVICE_TYPE_D43X		5
-	#define DS5_DEVICE_TYPE_D46X		4
-#define DS5_START_STOP_STREAM	0x1000
+#define DS5_DEVICE_TYPE_D45X		6
+#define DS5_DEVICE_TYPE_D43X		5
+#define DS5_DEVICE_TYPE_D46X		4
+
+#define DS5_MIPI_LANE_NUMS		0x0400
+#define DS5_MIPI_LANE_DATARATE		0x0402
+#define DS5_MIPI_CONF_STATUS		0x0500
+
+#define DS5_START_STOP_STREAM		0x1000
+#define DS5_DEPTH_STREAM_STATUS		0x1004
+#define DS5_RGB_STREAM_STATUS		0x1008
+#define DS5_IMU_STREAM_STATUS		0x100C
+#define DS5_IR_STREAM_STATUS		0x1014
+
+#define DS5_STREAM_DEPTH		0x0
+#define DS5_STREAM_RGB			0x1
+#define DS5_STREAM_IMU			0x2
+#define DS5_STREAM_IR			0x4
+#define DS5_STREAM_STOP			0x100
+#define DS5_STREAM_START		0x200
+#define DS5_STREAM_IDLE			0x1
+#define DS5_STREAM_STREAMING		0x2
+
 #define DS5_DEPTH_STREAM_DT		0x4000
 #define DS5_DEPTH_STREAM_MD		0x4002
 #define DS5_DEPTH_RES_WIDTH		0x4004
 #define DS5_DEPTH_RES_HEIGHT		0x4008
 #define DS5_DEPTH_FPS			0x400C
 #define DS5_DEPTH_OVERRIDE		0x401C
+
 #define DS5_RGB_STREAM_DT		0x4020
 #define DS5_RGB_STREAM_MD		0x4022
 #define DS5_RGB_RES_WIDTH		0x4024
 #define DS5_RGB_RES_HEIGHT		0x4028
 #define DS5_RGB_FPS			0x402C
-#define DS5_IR_STREAM_DT	0x4080
-#define DS5_IR_STREAM_MD	0x4082
-#define DS5_IR_RES_WIDTH	0x4084
-#define DS5_IR_RES_HEIGHT	0x4088
+
+#define DS5_IMU_STREAM_DT		0x4040
+#define DS5_IMU_STREAM_MD		0x4042
+#define DS5_IMU_RES_WIDTH		0x4044
+#define DS5_IMU_RES_HEIGHT		0x4048
+#define DS5_IMU_FPS			0x404C
+
+#define DS5_IR_STREAM_DT		0x4080
+#define DS5_IR_STREAM_MD		0x4082
+#define DS5_IR_RES_WIDTH		0x4084
+#define DS5_IR_RES_HEIGHT		0x4088
 #define DS5_IR_FPS			0x408C
-#define DS5_IR_OVERRIDE	0x409C
+#define DS5_IR_OVERRIDE			0x409C
 
 #define DS5_DEPTH_CONTROL_BASE		0x4100
 #define DS5_RGB_CONTROL_BASE		0x4200
-#define DS5_AUTO_EXPOSURE_MODE		0x000C
 #define DS5_MANUAL_EXPOSURE_LSB		0x0000
 #define DS5_MANUAL_EXPOSURE_MSB		0x0002
 #define DS5_MANUAL_GAIN			0x0004
 #define DS5_LASER_POWER			0x0008
-#define DS5_MANUAL_LASER_POWER		0x4124
+#define DS5_AUTO_EXPOSURE_MODE		0x000C
+#define DS5_EXPOSURE_ROI_TOP		0x0010
+#define DS5_EXPOSURE_ROI_LEFT		0x0014
+#define DS5_EXPOSURE_ROI_BOTTOM		0x0018
+#define DS5_EXPOSURE_ROI_RIGHT		0x001C
+#define DS5_MANUAL_LASER_POWER		0x0024
 
-#define MIPI_LANE_RATE	1000
+#define DS5_DEPTH_CONFIG_STATUS		0x4800
+#define DS5_RGB_CONFIG_STATUS		0x4802
+#define DS5_IMU_CONFIG_STATUS		0x4804
+#define DS5_IR_CONFIG_STATUS		0x4808
 
-#define MAX_DEPTH_EXP	2000
-#define MAX_RGB_EXP	10000
-#define DEF_DEPTH_EXP	330
-#define DEF_RGB_EXP	1660
+#define DS5_STATUS_STREAMING		0x1
+#define DS5_STATUS_INVALID_DT		0x2
+#define DS5_STATUS_INVALID_RES		0x4
+#define DS5_STATUS_INVALID_FPS		0x8
+
+#define MIPI_LANE_RATE			1000
+
+#define MAX_DEPTH_EXP			2000
+#define MAX_RGB_EXP			10000
+#define DEF_DEPTH_EXP			330
+#define DEF_RGB_EXP			1660
 
 /* Currently both depth and IR use VC 0 */
 #define DS5_DEPTH_VCHAN_N		0
@@ -105,9 +150,7 @@ enum ds5_mux_pad {
 #define DFU_WAIT_RET_LEN 6
 
 #define DS5_START_POLL_TIME	10
-
 #define DS5_START_MAX_TIME	1000
-
 #define DS5_START_MAX_COUNT	(DS5_START_MAX_TIME / DS5_START_POLL_TIME)
 
 /* DFU definition section */
@@ -1014,7 +1057,7 @@ static int ds5_configure(struct ds5 *state)
 		if (ret < 0)
 			return ret;
 
-		ret = ds5_write(state, DS5_IR_STREAM_MD, 0x212);
+		ret = ds5_write(state, DS5_IR_STREAM_MD, (0x2 << 8) | 0x12);
 		if (ret < 0)
 			return ret;

@@ -1079,7 +1122,7 @@ static int ds5_configure(struct ds5 *state)
 
 		/* TODO: read VC from DT */
 		/*       currently, writing 1 */
-		ret = ds5_write(state, DS5_RGB_STREAM_MD, 0x112);
+		ret = ds5_write(state, DS5_RGB_STREAM_MD, (0x1 << 8) | 0x12);
 		if (ret < 0)
 			return ret;
 
@@ -2470,7 +2513,7 @@ static int ds5_mux_s_stream(struct v4l2_subdev *sd, int on)
 			// start IR
 			if (state->is_y8) {
 				dev_info(&state->client->dev, "%s(): starting IR stream\n", __func__);
-				ret = ds5_write(state, DS5_START_STOP_STREAM, 0x204);
+				ret = ds5_write(state, DS5_START_STOP_STREAM, DS5_STREAM_START | DS5_STREAM_IR);
 				if (ret < 0)
 					goto restore_s_state;
 			}
@@ -2478,7 +2521,7 @@ static int ds5_mux_s_stream(struct v4l2_subdev *sd, int on)
 			// start DEPTH
 			if (state->is_depth) {
 				dev_info(&state->client->dev, "%s(): starting DEPTH stream\n", __func__);
-				ret = ds5_write(state, DS5_START_STOP_STREAM, 0x200);
+				ret = ds5_write(state, DS5_START_STOP_STREAM, DS5_STREAM_START | DS5_STREAM_DEPTH);
 				if (ret < 0)
 					goto restore_s_state;
 			}
@@ -2486,7 +2529,7 @@ static int ds5_mux_s_stream(struct v4l2_subdev *sd, int on)
 			// start RGB
 			if (state->is_rgb) {
 				dev_info(&state->client->dev, "%s(): starting RGB stream\n", __func__);
-				ret = ds5_write(state, DS5_START_STOP_STREAM, 0x201);
+				ret = ds5_write(state, DS5_START_STOP_STREAM, DS5_STREAM_START | DS5_STREAM_RGB);
 				if (ret < 0)
 					goto restore_s_state;
 			}
@@ -2494,19 +2537,19 @@ static int ds5_mux_s_stream(struct v4l2_subdev *sd, int on)
 			// check streaming status from FW
 			for (i = 0; i < DS5_START_MAX_COUNT; i++) {
 				if (state->is_depth) {
-					ds5_read(state, 0x1004, &streaming);
-					ds5_read(state, 0x4800, &status);
-					if (status == 1 && streaming == 2) break;
+					ds5_read(state, DS5_DEPTH_STREAM_STATUS, &streaming);
+					ds5_read(state, DS5_DEPTH_CONFIG_STATUS, &status);
+					if ((status & DS5_STATUS_STREAMING) && streaming == DS5_STREAM_STREAMING) break;
 				}
 				if (state->is_y8) {
-					ds5_read(state, 0x1014, &streaming);
-					ds5_read(state, 0x4808, &status);
-					if (status == 1 && streaming == 2) break;
+					ds5_read(state, DS5_IR_STREAM_STATUS, &streaming);
+					ds5_read(state, DS5_IR_CONFIG_STATUS, &status);
+					if ((status & DS5_STATUS_STREAMING) && streaming == DS5_STREAM_STREAMING) break;
 				}
 				if (state->is_rgb) {
-					ds5_read(state, 0x1008, &streaming);
-					ds5_read(state, 0x4802, &status);
-					if (status == 1 && streaming == 2) break;
+					ds5_read(state, DS5_RGB_STREAM_STATUS, &streaming);
+					ds5_read(state, DS5_RGB_CONFIG_STATUS, &status);
+					if ((status & DS5_STATUS_STREAMING) && streaming == DS5_STREAM_STREAMING) break;
 				}
 
 				msleep_range(DS5_START_POLL_TIME);
@@ -2528,7 +2571,7 @@ static int ds5_mux_s_stream(struct v4l2_subdev *sd, int on)
 		// stop IR
 		if (state->is_y8) {
 			dev_info(&state->client->dev, "%s(): stopping IR stream\n", __func__);
-			ret = ds5_write(state, DS5_START_STOP_STREAM, 0x104);
+			ret = ds5_write(state, DS5_START_STOP_STREAM, DS5_STREAM_STOP | DS5_STREAM_IR);
 			if (ret < 0)
 				goto restore_s_state;
 		}
@@ -2536,7 +2579,7 @@ static int ds5_mux_s_stream(struct v4l2_subdev *sd, int on)
 		// stop DEPTH
 		if (state->is_depth) {
 			dev_info(&state->client->dev, "%s(): stopping DEPTH stream\n", __func__);
-			ret = ds5_write(state, DS5_START_STOP_STREAM, 0x100);
+			ret = ds5_write(state, DS5_START_STOP_STREAM, DS5_STREAM_STOP | DS5_STREAM_DEPTH);
 			if (ret < 0)
 				goto restore_s_state;
 		}
@@ -2544,15 +2587,15 @@ static int ds5_mux_s_stream(struct v4l2_subdev *sd, int on)
 		// stop RGB
 		if (state->is_rgb) {
 			dev_info(&state->client->dev, "%s(): stopping RGB stream\n", __func__);
-			ret = ds5_write(state, DS5_START_STOP_STREAM, 0x101);
+			ret = ds5_write(state, DS5_START_STOP_STREAM, DS5_STREAM_STOP | DS5_STREAM_RGB);
 			if (ret < 0)
 				goto restore_s_state;
 		}
 	}
 
-	ds5_read(state, 0x4800, &depth_status);
-	ds5_read(state, 0x4802, &rgb_status);
-	ds5_read(state, 0x4808, &ir_status);
+	ds5_read(state, DS5_DEPTH_CONFIG_STATUS, &depth_status);
+	ds5_read(state, DS5_RGB_CONFIG_STATUS, &rgb_status);
+	ds5_read(state, DS5_IR_CONFIG_STATUS, &ir_status);
 
 	dev_info(&state->client->dev, "%s(): streaming %x depth status 0x%04x, ir status 0x%04x, rgb status 0x%04x, ret=%d\n", __func__,
 		 streaming, depth_status, ir_status, rgb_status, ret);
@@ -2562,9 +2605,9 @@ static int ds5_mux_s_stream(struct v4l2_subdev *sd, int on)
 restore_s_state:
 
 	// Obtain the last known FW status
-	ds5_read(state, 0x4800, &depth_status);
-	ds5_read(state, 0x4802, &rgb_status);
-	ds5_read(state, 0x4808, &ir_status);
+	ds5_read(state, DS5_DEPTH_CONFIG_STATUS, &depth_status);
+	ds5_read(state, DS5_RGB_CONFIG_STATUS, &rgb_status);
+	ds5_read(state, DS5_IR_CONFIG_STATUS, &ir_status);
 
 	dev_info(&state->client->dev, "%s(): stream toggle failed! %x depth status 0x%04x, ir status 0x%04x, rgb status 0x%04x\n",
 		__func__, restore_val, depth_status, ir_status, rgb_status);
@@ -2697,15 +2740,15 @@ static int ds5_hw_init(struct i2c_client *c, struct ds5 *state)
 {
 	struct v4l2_subdev *sd = &state->mux.sd.subdev;
 	u16 mipi_status, n_lanes, phy, drate_min, drate_max;
-	int ret = ds5_read(state, 0x300, &n_lanes);
+	int ret = ds5_read(state, DS5_MIPI_SUPPORT_LINES, &n_lanes);
 	if (!ret)
-		ret = ds5_read(state, 0x304, &phy);
+		ret = ds5_read(state, DS5_MIPI_SUPPORT_PHY, &phy);
 
 	if (!ret)
-		ret = ds5_read(state, 0x308, &drate_min);
+		ret = ds5_read(state, DS5_MIPI_DATARATE_MIN, &drate_min);
 
 	if (!ret)
-		ret = ds5_read(state, 0x30a, &drate_max);
+		ret = ds5_read(state, DS5_MIPI_DATARATE_MAX, &drate_max);
 
 	if (!ret)
 		dev_info(sd->dev, "%s(): %d: %u lanes, phy %x, data rate %u-%u\n",
@@ -2718,11 +2761,11 @@ static int ds5_hw_init(struct i2c_client *c, struct ds5 *state)
 #error get lane information
 #endif
 
-	ret = ds5_write(state, 0x400, n_lanes - 1);
-	if (!ret)
-		ret = ds5_write(state, 0x402, MIPI_LANE_RATE);
+	ret = ds5_write(state, DS5_MIPI_LANE_NUMS, n_lanes - 1);
 	if (!ret)
-		ret = ds5_read(state, 0x500, &mipi_status);
+		ret = ds5_write(state, DS5_MIPI_LANE_DATARATE, MIPI_LANE_RATE);
+
+	ret = ds5_read(state, DS5_MIPI_CONF_STATUS, &mipi_status);
 
 	dev_info(sd->dev, "%s(): %d phandle %x node %s status %x\n", __func__, __LINE__,
 		 c->dev.of_node->phandle, c->dev.of_node->full_name, mipi_status);
-- 
2.17.1

