From 1e7e0f938531bd499d28ed9b7924c841237ee138 Mon Sep 17 00:00:00 2001
From: Nael Masalha <nael.masalha@intel.com>
Date: Sun, 28 Nov 2021 13:48:36 +0200
Subject: [PATCH] Enable Y8 on separate video node

 - This solution is based on HW short of dedicated I2C bus

Signed-off-by: Nael Masalha <nael.masalha@intel.com>
---
 drivers/media/i2c/d4xx.c | 152 ++++++++++++++++++++-------------------
 1 file changed, 77 insertions(+), 75 deletions(-)

diff --git a/drivers/media/i2c/d4xx.c b/drivers/media/i2c/d4xx.c
index d25b10199..610a68a30 100644
--- a/drivers/media/i2c/d4xx.c
+++ b/drivers/media/i2c/d4xx.c
@@ -98,7 +98,7 @@ enum ds5_mux_pad {
 
 #define DS5_START_POLL_TIME	10
 
-#define DS5_START_MAX_TIME	300
+#define DS5_START_MAX_TIME	700
 
 #define DS5_START_MAX_COUNT	(DS5_START_MAX_TIME / DS5_START_POLL_TIME)
 
@@ -350,6 +350,8 @@ struct ds5 {
 	struct regmap *regmap;
 	struct regulator *vcc;
 	const struct ds5_variant *variant;
+	int is_depth;
+	int is_y8;
 	int is_rgb;
 	u16 fw_version;
 	u16 fw_build;
@@ -401,18 +403,11 @@ static int ds5_raw_write(struct ds5 *state, u16 reg, const void *val, size_t val
 
 static int ds5_read(struct ds5 *state, u16 reg, u16 *val)
 {
-	unsigned int data;
 	int ret = regmap_raw_read(state->regmap, reg, val, 2);
-	dev_info(&state->client->dev, "%s(): -- i2c read val 0x%04x: 0x%x\n",
-			__func__, reg, *val);
-	ret = regmap_read(state->regmap, reg, &data);
-	dev_info(&state->client->dev, "%s(): i2c read data 0x%04x: 0x%x\n",
-			__func__, reg, data);
 	if (ret < 0)
 		dev_err(&state->client->dev, "%s(): i2c read failed %d, 0x%04x\n",
 				__func__, ret, reg);
 	else {
-		//*val = data & 0xffff;
 		if (state->dfu_dev.dfu_state_flag == DS5_DFU_IDLE)
 			dev_info(&state->client->dev, "%s(): i2c read 0x%04x: 0x%x\n",
 					__func__, reg, *val);
@@ -956,57 +951,65 @@ static int ds5_configure(struct ds5 *state)
 	int ret;
 
 	if (!state->is_rgb) { // TODO: remove
-	if (!dfmt && !mfmt && !rgbfmt)
-		return -EINVAL;
+		u16 streaming, depth_status, rgb_status;
+		if (!dfmt && !mfmt && !rgbfmt)
+			return -EINVAL;
 
-	ret = ds5_write(state, DS5_DEPTH_Y_STREAMS_DT, dfmt | (mfmt << 8));
-	if (ret < 0)
-		return ret;
+		ds5_read(state, 0x1004, &streaming);
+		ds5_read(state, 0x4800, &depth_status);
+		ds5_read(state, DS5_DEPTH_Y_STREAMS_DT, &rgb_status);
+		ret = ds5_write(state, DS5_DEPTH_Y_STREAMS_DT, dfmt | (mfmt << 8));
+		if (ret < 0)
+			return ret;
 
-	ret = ds5_write(state, DS5_DEPTH_Y_STREAMS_MD, 0x12);
-	if (ret < 0)
-		return ret;
+		ret = ds5_write(state, DS5_DEPTH_Y_STREAMS_MD, 0x2012);
+		if (ret < 0)
+			return ret;
 
-	if (depth->streaming) {
-		// TODO: remove if 0x31 DT is supported
-		//       this will configure FW to override DT in mipi header to
-		//       0x1E for depth, since DT 0x31 is not supported
-		//       in Jetson
-		if (dfmt) {
-			ret = ds5_write(state, 0x401C, 0x1E);
+		if (state->is_depth && depth->streaming) {
+			// TODO: remove if 0x31 DT is supported
+			//       this will configure FW to override DT in mipi header to
+			//       0x1E for depth, since DT 0x31 is not supported
+			//       in Jetson
+			//if (dfmt) {
+				ret = ds5_write(state, 0x401C, 0x1E);
+			//	if (ret < 0)
+			//		return ret;
+			//} else {
+			//	ret = ds5_write(state, 0x401C, mfmt);
+			//	if (ret < 0)
+			//		return ret;
+			//}
+
+			ret = ds5_write(state, DS5_DEPTH_Y_FPS, depth->config.framerate);
 			if (ret < 0)
 				return ret;
-		} else {
-			ret = ds5_write(state, 0x401C, mfmt);
+
+			ret = ds5_write(state, DS5_DEPTH_RES_WIDTH, depth->config.resolution->width);
 			if (ret < 0)
 				return ret;
-		}
 
-		ret = ds5_write(state, DS5_DEPTH_Y_FPS, depth->config.framerate);
-		if (ret < 0)
-			return ret;
-
-		ret = ds5_write(state, DS5_DEPTH_RES_WIDTH, depth->config.resolution->width);
-		if (ret < 0)
-			return ret;
+			ret = ds5_write(state, DS5_DEPTH_RES_HEIGHT, depth->config.resolution->height);
+			if (ret < 0)
+				return ret;
+		}
 
-		ret = ds5_write(state, DS5_DEPTH_RES_HEIGHT, depth->config.resolution->height);
-		if (ret < 0)
-			return ret;
-	}
+		if (state->is_y8 && motion_t->streaming) {
+			ret = ds5_write(state, 0x401C, mfmt);
+			if (ret < 0)
+				return ret;
 
-	if (motion_t->streaming) {
-		ret = ds5_write(state, DS5_DEPTH_Y_FPS, motion_t->config.framerate);
-		if (ret < 0)
-			return ret;
+			ret = ds5_write(state, DS5_DEPTH_Y_FPS, motion_t->config.framerate);
+			if (ret < 0)
+				return ret;
 
-		ret = ds5_write(state, DS5_Y_RES_WIDTH, motion_t->config.resolution->width);
-		if (ret < 0)
-			return ret;
+			ret = ds5_write(state, DS5_Y_RES_WIDTH, motion_t->config.resolution->width);
+			if (ret < 0)
+				return ret;
 
-		ret = ds5_write(state, DS5_Y_RES_HEIGHT, motion_t->config.resolution->height);
-		if (ret < 0)
-			return ret;
+			ret = ds5_write(state, DS5_Y_RES_HEIGHT, motion_t->config.resolution->height);
+			if (ret < 0)
+				return ret;
 	}
 	}
 
@@ -2037,8 +2040,10 @@ static int ds5_mux_enum_mbus_code(struct v4l2_subdev *sd,
 	tmp.pad = 0;
 	if (state->is_rgb)
 		remote_sd = &state->rgb.sensor.sd;
-	else
+	if (state->is_depth)
 		remote_sd = &state->depth.sensor.sd;
+	if (state->is_y8)
+		remote_sd = &state->motion_t.sensor.sd;
 
 	/* Locks internally */
 	ret = ds5_sensor_enum_mbus_code(remote_sd, cfg, &tmp);
@@ -2061,10 +2066,12 @@ static int ds5_mux_enum_frame_size(struct v4l2_subdev *sd,
 
 	tmp.pad = 0;
 
+	if (state->is_depth)
+		pad = DS5_MUX_PAD_DEPTH;
+	if (state->is_y8)
+		pad = DS5_MUX_PAD_MOTION_T;
 	if (state->is_rgb)
 		pad = DS5_MUX_PAD_RGB;
-	else
-		pad = DS5_MUX_PAD_DEPTH;
 
 	switch (pad) {
 	case DS5_MUX_PAD_MOTION_T:
@@ -2095,10 +2102,6 @@ static int ds5_mux_enum_frame_size(struct v4l2_subdev *sd,
 		return -EINVAL;
 	}
 
-	if (state->is_rgb)
-		remote_sd = &state->rgb.sensor.sd;
-	else
-		remote_sd = &state->depth.sensor.sd;
 	/* Locks internally */
 	ret = ds5_sensor_enum_frame_size(remote_sd, NULL, &tmp);
 	if (!ret) {
@@ -2124,10 +2127,13 @@ static int ds5_mux_enum_frame_interval(struct v4l2_subdev *sd,
 
 	dev_err(state->depth.sensor.sd.dev, "%s(): pad %d code %x width %d height %d\n", __func__,
 				pad, tmp.code, tmp.width, tmp.height);
+
+	if (state->is_depth)
+		pad = DS5_MUX_PAD_DEPTH;
+	if (state->is_y8)
+		pad = DS5_MUX_PAD_MOTION_T;
 	if (state->is_rgb)
 		pad = DS5_MUX_PAD_RGB;
-	else
-		pad = DS5_MUX_PAD_DEPTH;
 
 	switch (pad) {
 	case DS5_MUX_PAD_MOTION_T:
@@ -2158,11 +2164,6 @@ static int ds5_mux_enum_frame_interval(struct v4l2_subdev *sd,
 		return -EINVAL;
 	}
 
-	if (state->is_rgb)
-		remote_sd = &state->rgb.sensor.sd;
-	else
-		remote_sd = &state->depth.sensor.sd;
-
 	/* Locks internally */
 	ret = ds5_sensor_enum_frame_interval(remote_sd, NULL, &tmp);
 	if (!ret) {
@@ -2321,7 +2322,7 @@ static int ds5_mux_s_frame_interval(struct v4l2_subdev *sd,
 static int ds5_mux_s_stream(struct v4l2_subdev *sd, int on)
 {
 	struct ds5 *state = container_of(sd, struct ds5, mux.sd.subdev);
-	u16 streaming, rate, depth_status, rgb_status, s_stream;
+	u16 streaming, rate, depth_status, rgb_status;
 	int ret = 0;
 	unsigned int i = 0;
 
@@ -2335,18 +2336,11 @@ static int ds5_mux_s_stream(struct v4l2_subdev *sd, int on)
 	// TODO: remove, workaround for FW crash in start
 	msleep_range(100);
 
-	if (!on) {
-		ds5_read(state, 0x1004, &streaming);
-		ds5_read(state, 0x4800, &depth_status);
-		ds5_read(state, 0x4802, &rgb_status);
-	}
-
 	if (!ret) {
-		ds5_read (state, 0x1000, &s_stream);
 		if (state->is_rgb)
-			ret = ds5_write(state, 0x1000,  s_stream | (on ? 0x200  : 0x100 ));
+			ret = ds5_write(state, 0x1000, (on ? 0x200  : 0x100 ));
 		else
-			ret = ds5_write(state, 0x1000,  s_stream | (on ? 2 : 1));
+			ret = ds5_write(state, 0x1000, (on ? 2 : 1));
 	}
 
 	if (on) {
@@ -2358,12 +2352,16 @@ static int ds5_mux_s_stream(struct v4l2_subdev *sd, int on)
 			ds5_read(state, 0x1004, &streaming);
 			ds5_read(state, 0x4800, &depth_status);
 			ds5_read(state, 0x4802, &rgb_status);
-			if ((!state->is_rgb) && ((streaming & 0xFF) == 2))
+			if ((!state->is_rgb) && ((streaming & 0xFF) == 2) && (depth_status == 1))
 				break;
-			if ((state->is_rgb) && ((streaming & 0xF00) == ((2 << 8))))
+			if ((state->is_rgb) && ((streaming & 0xF00) == ((2 << 8))) && (rgb_status == 1))
 				break;
 			msleep_range(DS5_START_POLL_TIME);
 		}
+	} else {
+		ds5_read(state, 0x1004, &streaming);
+		ds5_read(state, 0x4800, &depth_status);
+		ds5_read(state, 0x4802, &rgb_status);
 	}
 
 	if(on && (DS5_START_MAX_COUNT == i)) {
@@ -2629,7 +2627,7 @@ static int ds5_fixed_configuration(struct i2c_client *client, struct ds5 *state)
 	default:
 		sensor->formats = ds5_depth_formats_d46x;
 	}
-	sensor->n_formats = 3;
+	sensor->n_formats = 1;
 	sensor->mux_pad = DS5_MUX_PAD_DEPTH;
 
 	sensor = &state->motion_t.sensor;
@@ -3182,6 +3180,10 @@ static int ds5_probe(struct i2c_client *c, const struct i2c_device_id *id)
 
 	err = of_property_read_string(c->dev.of_node, "cam-type",
 			&str);
+	if (!err && !strncmp(str, "Depth", strlen("Depth")))
+		state->is_depth = 1;
+	if (!err && !strncmp(str, "Y8", strlen("Y8")))
+		state->is_y8 = 1;
 	if (!err && !strncmp(str, "RGB", strlen("RGB")))
 		state->is_rgb = 1;
 
@@ -3246,4 +3248,4 @@ module_i2c_driver(ds5_i2c_driver);
 MODULE_DESCRIPTION("Intel D4XX camera driver");
 MODULE_AUTHOR("Emil Jahshan (emil.jahshan@intel.com)");
 MODULE_LICENSE("GPL v2");
-MODULE_VERSION("1.0.0.4");
+MODULE_VERSION("1.0.0.5");
-- 
2.17.1

