From ffd1d89e68e687a33cf3b444ab489492a07e5e4e Mon Sep 17 00:00:00 2001
From: Nael Masalha <nael.masalha@intel.com>
Date: Sun, 15 Mar 2020 19:22:31 +0200
Subject: [PATCH] d4xx: enable meta data for depth stream

Signed-off-by: Nael Masalha <nael.masalha@intel.com>
---
 drivers/media/i2c/d4xx.c                          | 125 ++++-----
 drivers/media/platform/tegra/camera/vi/channel.c  | 297 +++++++++++++++++++++-
 drivers/media/platform/tegra/camera/vi/graph.c    |  11 +-
 drivers/media/platform/tegra/camera/vi/vi4_fops.c |  18 +-
 drivers/media/platform/tegra/camera/vi/vi5_fops.c |  48 +++-
 include/media/mc_common.h                         |  20 +-
 6 files changed, 429 insertions(+), 90 deletions(-)

diff --git a/drivers/media/i2c/d4xx.c b/drivers/media/i2c/d4xx.c
index c7c56b6..5c051d3 100644
--- a/drivers/media/i2c/d4xx.c
+++ b/drivers/media/i2c/d4xx.c
@@ -736,8 +736,7 @@ static int ds5_sensor_get_fmt(struct v4l2_subdev *sd, struct v4l2_subdev_pad_con
 	mutex_unlock(&state->lock);
 
 	dev_info(sd->dev, "%s(): pad %x, code %x, res %ux%u\n", __func__, fmt->pad, fmt->format.code,
-	        fmt->format.width, fmt->format.height);
-
+		 fmt->format.width, fmt->format.height);
 
 	return 0;
 }
@@ -833,10 +832,10 @@ static int ds5_sensor_set_fmt(struct v4l2_subdev *sd, struct v4l2_subdev_pad_con
 static int ds5_configure(struct ds5 *state)
 {
 	/*const*/ struct ds5_sensor *depth = &state->depth.sensor;
-	/*const*/ //struct ds5_sensor *motion_t = &state->motion_t.sensor;
+	/*const*/ struct ds5_sensor *motion_t = &state->motion_t.sensor;
 	struct ds5_sensor *rgb = &state->rgb.sensor;
 	u8 dfmt = depth->streaming ? 0x31 : 0;
-	u8 mfmt = 0; //motion_t->streaming ? motion_t->config.format->data_type : 0;
+	u8 mfmt = motion_t->streaming ? motion_t->config.format->data_type : 0;
 	u8 rgbfmt = rgb->streaming ? rgb->config.format->data_type : 0;
 	int ret;
 
@@ -844,24 +843,15 @@ static int ds5_configure(struct ds5 *state)
 	if (!dfmt && !mfmt && !rgbfmt)
 		return -EINVAL;
 
-	if (depth->streaming && (
-	        depth->config.format->data_type == 0x2a ||
-	        depth->config.format->data_type == 0x24)) {
-	    dfmt = 0;
-	    mfmt = depth->config.format->data_type;
-	}
-
-	//dev_info(sensor->sd.dev, "%s(): dfmt: %x, mfmt: %x\n", __func__, dfmt, mfmt);
-
 	ret = ds5_write(state, DS5_DEPTH_Y_STREAMS_DT, dfmt | (mfmt << 8));
 	if (ret < 0)
 		return ret;
 
-	ret = ds5_write(state, DS5_DEPTH_Y_STREAMS_MD, 0/*0x1200*/);
+	ret = ds5_write(state, DS5_DEPTH_Y_STREAMS_MD, 0x12);
 	if (ret < 0)
 		return ret;
 
-	if (dfmt != 0) {
+	if (depth->streaming) {
 		// TODO: remove if 0x31 DT is supported
 		//       this will configure FW to override DT in mipi header to
 		//       0x1E for depth, since DT 0x31 is not supported
@@ -889,17 +879,16 @@ static int ds5_configure(struct ds5 *state)
 			return ret;
 	}
 
-	if (mfmt != 0) {
-	    ret = ds5_write(state, 0x401C, mfmt);
-		ret = ds5_write(state, DS5_DEPTH_Y_FPS, depth->config.framerate);
+	if (motion_t->streaming) {
+		ret = ds5_write(state, DS5_DEPTH_Y_FPS, motion_t->config.framerate);
 		if (ret < 0)
 			return ret;
 
-		ret = ds5_write(state, DS5_Y_RES_WIDTH, depth->config.resolution->width);
+		ret = ds5_write(state, DS5_Y_RES_WIDTH, motion_t->config.resolution->width);
 		if (ret < 0)
 			return ret;
 
-		ret = ds5_write(state, DS5_Y_RES_HEIGHT, depth->config.resolution->height);
+		ret = ds5_write(state, DS5_Y_RES_HEIGHT, motion_t->config.resolution->height);
 		if (ret < 0)
 			return ret;
 	}
@@ -913,7 +902,7 @@ static int ds5_configure(struct ds5 *state)
 
 		/* TODO: read VC from DT */
 		/*       currently, writing 1 */
-		ret = ds5_write(state, DS5_RGB_STREAM_MD, 0x100/*0x1200*/);
+		ret = ds5_write(state, DS5_RGB_STREAM_MD, 0x100);
 		if (ret < 0)
 			return ret;
 
@@ -1089,7 +1078,7 @@ static int ds5_send_hwmc(struct ds5 *state, u16 cmdLen, struct hwm_cmd *cmd,
 {
 	int ret = 0;
 	u16 status = 2;
-	int retries = 5;
+	int retries = 20;
 	int errorCode;
 
 	dev_info(&state->client->dev, "%s(): HWMC header: 0x%x, magic: 0x%x, opcode: 0x%x, param1: %d, param2: %d, param3: %d, param4: %d\n",
@@ -1532,7 +1521,7 @@ static const struct v4l2_ctrl_config ds5_ctrl_laser_power = {
 	.min = 0,
 	.max = 1,
 	.step = 1,
-	.def = 0,
+	.def = 1,
 };
 
 static const struct v4l2_ctrl_config ds5_ctrl_manual_laser_power = {
@@ -1782,7 +1771,7 @@ static int ds5_ctrl_init(struct ds5 *state)
 		V4L2_EXPOSURE_MANUAL;
 	ctrls->auto_exp = v4l2_ctrl_new_std_menu(hdl, ops,
 						 V4L2_CID_EXPOSURE_AUTO,
-						 max, 0, V4L2_EXPOSURE_AUTO);
+						 max, 0, 1);
 
 	// TODO: this prevents setting of manual exposure
 	// v4l2_ctrl_auto_cluster(3, &ctrls->auto_exp, 0, false);
@@ -1873,12 +1862,12 @@ static int ds5_depth_init(struct i2c_client *c, struct ds5 *state)
 			       &ds5_depth_subdev_ops, "depth");
 }
 
-/*static int ds5_motion_t_init(struct i2c_client *c, struct ds5 *state)
+static int ds5_motion_t_init(struct i2c_client *c, struct ds5 *state)
 {
 	state->motion_t.sensor.mux_pad = DS5_MUX_PAD_MOTION_T;
 	return ds5_sensor_init(c, state, &state->motion_t.sensor,
 			       &ds5_motion_t_subdev_ops, "motion detection");
-}*/
+}
 
 static int ds5_rgb_init(struct i2c_client *c, struct ds5 *state)
 {
@@ -1908,20 +1897,21 @@ static int ds5_mux_enum_mbus_code(struct v4l2_subdev *sd,
 		remote_sd = &state->rgb.sensor.sd;
 		break;
 	case DS5_MUX_PAD_EXTERNAL:
-		/*if (mce->index >= state->motion_t.sensor.n_formats +
-		    state->depth.sensor.n_for*/
+		if (mce->index >= state->motion_t.sensor.n_formats +
+		    state->depth.sensor.n_formats)
+			return -EINVAL;
 
 		/*
 		 * First list Left node / Motion Tracker formats, then depth.
 		 * This should also help because D16 doesn't have a direct
 		 * analog in MIPI CSI-2.
 		 */
-		/*if (mce->index < state->motion_t.sensor.n_formats) {
+		if (mce->index < state->motion_t.sensor.n_formats) {
 			remote_sd = &state->motion_t.sensor.sd;
 		} else {
-			tmp.index = mce->index - state->motion_t.sensor.n_formats;*/
+			tmp.index = mce->index - state->motion_t.sensor.n_formats;
 			remote_sd = &state->depth.sensor.sd;
-		//}
+		}
 
 		break;
 	default:
@@ -1975,15 +1965,15 @@ static int ds5_mux_enum_frame_size(struct v4l2_subdev *sd,
 		 * Assume, that different sensors don't support the same formats
 		 * Try the Depth sensor first, then the Motion Tracker
 		 */
-//		remote_sd = &state->depth.sensor.sd;
-//		ret = ds5_sensor_enum_frame_size(remote_sd, NULL, &tmp);
-//		if (!ret) {
-//			*fse = tmp;
-//			fse->pad = pad;
-//			return 0;
-//		}
-//
-//		remote_sd = &state->motion_t.sensor.sd;
+		remote_sd = &state->depth.sensor.sd;
+		ret = ds5_sensor_enum_frame_size(remote_sd, NULL, &tmp);
+		if (!ret) {
+			*fse = tmp;
+			fse->pad = pad;
+			return 0;
+		}
+
+		remote_sd = &state->motion_t.sensor.sd;
 		break;
 	default:
 		return -EINVAL;
@@ -2078,12 +2068,10 @@ static int ds5_mux_set_fmt(struct v4l2_subdev *sd, struct v4l2_subdev_pad_config
 	int ret = 0;
 
 	if (!state->is_rgb)
-		if (fmt->format.code == MEDIA_BUS_FMT_UYVY8_1X16 ||
-		        fmt->format.code == MEDIA_BUS_FMT_RGB888_1X24 ||
-		        fmt->format.code == MEDIA_BUS_FMT_Y8_1X8)
+		if (fmt->format.code == MEDIA_BUS_FMT_UYVY8_1X16)
 			pad = DS5_MUX_PAD_DEPTH;
 		else
-			pad = DS5_MUX_PAD_DEPTH;
+			pad = DS5_MUX_PAD_MOTION_T;
 	else
 		pad = DS5_MUX_PAD_RGB;
 
@@ -2138,7 +2126,7 @@ static int ds5_mux_get_fmt(struct v4l2_subdev *sd, struct v4l2_subdev_pad_config
 		tmp.pad = DS5_MUX_PAD_RGB;
 		pad = DS5_MUX_PAD_RGB;
 	} else
-		tmp.pad = 1;
+		tmp.pad = 0;
 
 	switch (pad) {
 	case DS5_MUX_PAD_MOTION_T:
@@ -2160,10 +2148,10 @@ static int ds5_mux_get_fmt(struct v4l2_subdev *sd, struct v4l2_subdev_pad_config
 
 	/* Locks internally */
 	ret = ds5_sensor_get_fmt(remote_sd, cfg, &tmp);
-	//if (!ret) {
-	//	*fmt = tmp;
-	//	fmt->pad = pad;
-	//}
+	if (!ret) {
+		*fmt = tmp;
+		fmt->pad = pad;
+	}
 
 	return ret;
 }
@@ -2179,16 +2167,14 @@ static int ds5_mux_g_frame_interval(struct v4l2_subdev *sd,
 	if (NULL == sd || NULL == fi)
 		return -EINVAL;
 
+	dev_info(sd->dev, "%s(): %s %d\n", __func__, sd->name, fi->pad);
+
 	fi->interval.numerator = 1;
-	if(state->is_rgb) {
-	    dev_info(sd->dev, "%s(): rgb %d\n", __func__, rgb->config.framerate);
+	if(state->is_rgb)
 		fi->interval.denominator = rgb->config.framerate;
-	} else {
-	    dev_info(sd->dev, "%s(): depth %d \n", __func__, depth->config.framerate);
+	else
 		fi->interval.denominator = depth->config.framerate;
-	}
 
-	dev_info(sd->dev, "%s(): rgb\n", __func__);
 	return 0;
 }
 
@@ -2342,18 +2328,18 @@ static int ds5_mux_registered(struct v4l2_subdev *sd)
 	if (ret < 0)
 		return ret;
 
-	//ret = ds5_sensor_register(state, &state->motion_t.sensor);
-	//if (ret < 0)
-	//	goto e_depth;
+	ret = ds5_sensor_register(state, &state->motion_t.sensor);
+	if (ret < 0)
+		goto e_depth;
 
 	ret = ds5_sensor_register(state, &state->rgb.sensor);
 	if (ret < 0)
-		goto e_depth;
+		goto e_rgb;
 
 	return 0;
 
-//e_rgb:
-//	v4l2_device_unregister_subdev(&state->motion_t.sensor.sd);
+e_rgb:
+	v4l2_device_unregister_subdev(&state->motion_t.sensor.sd);
 
 e_depth:
 	v4l2_device_unregister_subdev(&state->depth.sensor.sd);
@@ -2877,17 +2863,17 @@ static int ds5_v4l_init(struct i2c_client *c,struct ds5 *state)
 	if (ret < 0)
 		return ret;
 
-	//ret = ds5_motion_t_init(c, state);
-	//if (ret < 0)
-	//	goto e_depth;
+	ret = ds5_motion_t_init(c, state);
+	if (ret < 0)
+		goto e_depth;
 
 	ret = ds5_rgb_init(c, state);
 	if (ret < 0)
-		goto e_depth;
+		goto e_rgb;
 
 	ret = ds5_mux_init(c, state);
 	if (ret < 0)
-		goto e_rgb;
+		goto e_motion_t;
 
 	ret = ds5_hw_init(c, state);
 	if (ret < 0)
@@ -2902,8 +2888,8 @@ e_mux:
 	ds5_mux_remove(state);
 e_rgb:
 	media_entity_cleanup(&state->rgb.sensor.sd.entity);
-//e_motion_t:
-//	media_entity_cleanup(&state->motion_t.sensor.sd.entity);
+e_motion_t:
+	media_entity_cleanup(&state->motion_t.sensor.sd.entity);
 e_depth:
 	media_entity_cleanup(&state->depth.sensor.sd.entity);
 	return ret;
@@ -3017,6 +3003,7 @@ static int ds5_probe(struct i2c_client *c, const struct i2c_device_id *id)
 
 
 	state->client = c;
+	dev_warn(&c->dev, "Driver data NAEL %d\n", (int)id->driver_data);
 	state->variant = ds5_variants + id->driver_data;
 
 	state->vcc = devm_regulator_get(&c->dev, "vcc");
@@ -3120,4 +3107,4 @@ module_i2c_driver(ds5_i2c_driver);
 MODULE_DESCRIPTION("Intel D4XX camera driver");
 MODULE_AUTHOR("Guennadi Liakhovetski (guennadi.liakhovetski@intel.com)");
 MODULE_LICENSE("GPL v2");
-MODULE_VERSION("0.51.1.0");
+MODULE_VERSION("0.16.1.0");
diff --git a/drivers/media/platform/tegra/camera/vi/channel.c b/drivers/media/platform/tegra/camera/vi/channel.c
index f056482..fd3aad4 100644
--- a/drivers/media/platform/tegra/camera/vi/channel.c
+++ b/drivers/media/platform/tegra/camera/vi/channel.c
@@ -966,7 +966,8 @@ tegra_channel_querycap(struct file *file, void *fh, struct v4l2_capability *cap)
 
 	cap->device_caps = V4L2_CAP_VIDEO_CAPTURE | V4L2_CAP_STREAMING;
 	cap->device_caps |= V4L2_CAP_EXT_PIX_FORMAT;
-	cap->capabilities = cap->device_caps | V4L2_CAP_DEVICE_CAPS;
+	cap->capabilities = cap->device_caps | V4L2_CAP_DEVICE_CAPS |
+		V4L2_CAP_META_CAPTURE;
 
 	strlcpy(cap->driver, "tegra-video", sizeof(cap->driver));
 	strlcpy(cap->card, chan->video.name, sizeof(cap->card));
@@ -2094,6 +2095,8 @@ static long tegra_channel_compat_ioctl(struct file *filp,
 }
 #endif
 
+static int tegra_metadata_get_format(struct file *file, void *fh,
+				     struct v4l2_format *format);
 static const struct v4l2_ioctl_ops tegra_channel_ioctl_ops = {
 	.vidioc_querycap		= tegra_channel_querycap,
 	.vidioc_enum_framesizes		= tegra_channel_enum_framesizes,
@@ -2255,6 +2258,283 @@ static int tegra_channel_csi_init(struct tegra_channel *chan)
 	return ret;
 }
 
+static int tegra_metadata_open(struct file *fp)
+{
+	struct video_device *vdev = video_devdata(fp);
+	struct tegra_channel *chan = video_get_drvdata(vdev);
+	int ret;
+
+	mutex_lock(&chan->embedded.lock);
+	ret = v4l2_fh_open(fp);
+	mutex_unlock(&chan->embedded.lock);
+
+	return ret;
+}
+
+static int tegra_metadata_close(struct file *fp)
+{
+	struct video_device *vdev = video_devdata(fp);
+	struct tegra_channel *chan = video_get_drvdata(vdev);
+	int ret = _vb2_fop_release(fp, &chan->embedded.lock);
+
+	return ret;
+}
+
+static const struct v4l2_file_operations tegra_metadata_fops = {
+	.owner		= THIS_MODULE,
+	.unlocked_ioctl	= video_ioctl2,
+	.open		= tegra_metadata_open,
+	.release	= tegra_metadata_close,
+	.read		= vb2_fop_read,
+	.poll		= vb2_fop_poll,
+	.mmap		= vb2_fop_mmap,
+};
+
+static int tegra_metadata_querycap(struct file *file, void *fh,
+				  struct v4l2_capability *cap)
+{
+	struct v4l2_fh *vfh = file->private_data;
+	struct tegra_channel *chan = container_of(vfh->vdev,
+					struct tegra_channel, embedded.video);
+
+	/* FIXME: why do Device Caps show V4L2_CAP_EXT_PIX_FORMAT? */
+	cap->device_caps = V4L2_CAP_META_CAPTURE | V4L2_CAP_STREAMING;
+	cap->capabilities = cap->device_caps | V4L2_CAP_DEVICE_CAPS |
+		V4L2_CAP_EXT_PIX_FORMAT | V4L2_CAP_VIDEO_CAPTURE;
+
+	strlcpy(cap->driver, "tegra-embedded", sizeof(cap->driver));
+	strlcpy(cap->card, vfh->vdev->name, sizeof(cap->card));
+	snprintf(cap->bus_info, sizeof(cap->bus_info), "platform:%s:%u",
+		 dev_name(chan->vi->dev), chan->port[0]);
+
+	return 0;
+}
+
+static int tegra_metadata_enum_format(struct file *file, void *fh,
+				      struct v4l2_fmtdesc *f)
+{
+	if (f->index)
+		return -EINVAL;
+
+	f->pixelformat = V4L2_META_FMT_D4XX_CSI2;
+	strlcpy(f->description,	"D4XX metadata format", sizeof(f->description));
+
+	return 0;
+}
+
+static int tegra_metadata_get_format(struct file *file, void *fh,
+				     struct v4l2_format *format)
+{
+	struct v4l2_fh *vfh = file->private_data;
+	struct v4l2_meta_format *fmt = &format->fmt.meta;
+
+	if (format->type != vfh->vdev->queue->type)
+		return -EINVAL;
+
+	memset(fmt, 0, sizeof(*fmt));
+
+	fmt->dataformat = V4L2_META_FMT_D4XX_CSI2;
+	fmt->buffersize = 256;
+
+	return 0;
+}
+
+static int tegra_metadata_set_format(struct file *file, void *fh,
+				     struct v4l2_format *format)
+{
+	return 0;
+}
+
+static int tegra_metadata_try_format(struct file *file, void *fh,
+				     struct v4l2_format *format)
+{
+	return 0;
+}
+
+static const struct v4l2_ioctl_ops tegra_metadata_ioctl_ops = {
+	.vidioc_querycap		= tegra_metadata_querycap,
+	.vidioc_enum_fmt_meta_cap	= tegra_metadata_enum_format,
+	.vidioc_g_fmt_meta_cap		= tegra_metadata_get_format,
+	.vidioc_s_fmt_meta_cap		= tegra_metadata_set_format,
+	.vidioc_try_fmt_meta_cap	= tegra_metadata_try_format,
+	.vidioc_reqbufs			= vb2_ioctl_reqbufs,
+	.vidioc_querybuf		= vb2_ioctl_querybuf,
+	.vidioc_qbuf			= vb2_ioctl_qbuf,
+	.vidioc_dqbuf			= vb2_ioctl_dqbuf,
+	.vidioc_create_bufs		= vb2_ioctl_create_bufs,
+	.vidioc_expbuf			= vb2_ioctl_expbuf,
+	.vidioc_streamon		= vb2_ioctl_streamon,
+	.vidioc_streamoff		= vb2_ioctl_streamoff,
+};
+
+static int tegra_metadata_queue_setup(struct vb2_queue *vq,
+		     unsigned int *nbuffers, unsigned int *nplanes,
+		     unsigned int sizes[], struct device *alloc_devs[])
+{
+	struct tegra_channel *chan = vb2_get_drv_priv(vq);
+
+	if (*nplanes) {
+		if (*nplanes != 1)
+			return -EINVAL;
+
+		if (sizes[0] < 256)
+			return -EINVAL;
+
+		return 0;
+	}
+
+	*nplanes = 1;
+	sizes[0] = 256;
+	alloc_devs[0] = chan->vi->dev;
+
+
+	return 0;
+}
+
+static int tegra_metadata_buffer_prepare(struct vb2_buffer *vb)
+{
+	if (vb->num_planes != 1)
+		return -EINVAL;
+
+	if (vb2_plane_size(vb, 0) < 256)
+		return -EINVAL;
+
+	return 0;
+}
+
+static void tegra_metadata_buffer_queue(struct vb2_buffer *vb)
+{
+	struct tegra_channel *chan = vb2_get_drv_priv(vb->vb2_queue);
+
+	spin_lock(&chan->embedded.spin_lock);
+	if (chan->embedded.num_buffers < 16) {
+		chan->embedded.buffers[chan->embedded.head] = vb;
+		chan->embedded.head++;
+		if (chan->embedded.head > 15)
+			chan->embedded.head = chan->embedded.head - 16;
+		chan->embedded.num_buffers++;
+	}
+	spin_unlock(&chan->embedded.spin_lock);
+}
+
+static int tegra_metadata_start_streaming(struct vb2_queue *vq, unsigned int count)
+{
+	return 0;
+}
+
+static void tegra_metadata_stop_streaming(struct vb2_queue *vq)
+{
+	struct tegra_channel *chan = vb2_get_drv_priv(vq);
+	int i = 0;
+
+	spin_lock(&chan->embedded.spin_lock);
+	for (i = 0; i < chan->embedded.num_buffers; i++) {
+		struct vb2_buffer *evb;
+		evb = chan->embedded.buffers[chan->embedded.tail];
+		chan->embedded.buffers[chan->embedded.tail] = NULL;
+		chan->embedded.tail++;
+		if (chan->embedded.tail > 15)
+			chan->embedded.tail = chan->embedded.tail - 16;
+		vb2_buffer_done(evb, VB2_BUF_STATE_ERROR);
+	}
+	spin_unlock(&chan->embedded.spin_lock);
+
+	chan->embedded.head = 0;
+	chan->embedded.tail = 0;;
+	chan->embedded.num_buffers = 0;
+}
+
+static const struct vb2_ops tegra_metadata_qops = {
+	.queue_setup		= tegra_metadata_queue_setup,
+	.buf_prepare		= tegra_metadata_buffer_prepare,
+	.buf_queue		= tegra_metadata_buffer_queue,
+	.wait_prepare		= vb2_ops_wait_prepare,
+	.wait_finish		= vb2_ops_wait_finish,
+	.start_streaming	= tegra_metadata_start_streaming,
+	.stop_streaming		= tegra_metadata_stop_streaming,
+};
+
+static int tegra_channel_video_init_embedded(struct tegra_channel *chan)
+{
+	struct video_device *video = &chan->embedded.video;
+	struct vb2_queue *queue = &chan->embedded.queue;
+	struct tegra_mc_vi *vi = chan->vi;
+	int ret;
+
+	mutex_init(&chan->embedded.lock);
+	spin_lock_init(&chan->embedded.spin_lock);
+
+	chan->embedded.pad.flags = MEDIA_PAD_FL_SINK;
+
+	ret = tegra_media_entity_init(&video->entity, 1, &chan->embedded.pad, false, false);
+	if (ret < 0) {
+		dev_err(vi->dev, "%s(): metadata entity init: %d\n",
+			__func__, ret);
+		return ret;
+	}
+
+	video->fops = &tegra_metadata_fops;
+	video->v4l2_dev = &vi->v4l2_dev;
+	video->queue = queue;
+	snprintf(video->name, sizeof(video->name), "%s-metadata-%u",
+		dev_name(vi->dev), chan->port[0]);
+	video->vfl_type = VFL_TYPE_GRABBER;
+	video->vfl_dir = VFL_DIR_RX;
+	video->release = video_device_release_empty;
+	video->ioctl_ops = &tegra_metadata_ioctl_ops;
+	video->lock = &chan->embedded.lock;
+
+	video_set_drvdata(video, chan);
+
+#if defined(CONFIG_VIDEOBUF2_DMA_CONTIG)
+	/* get the buffers queue... */
+	ret = tegra_vb2_dma_init(vi->dev, &chan->embedded.alloc_ctx,
+			SZ_64K, &vi->vb2_dma_alloc_refcnt);
+	if (ret < 0)
+		goto ctx_alloc_error;
+
+#endif
+//#if defined(CONFIG_VIDEOBUF2_DMA_CONTIG)
+	/* get the buffers queue... */
+//	chan->embedded.alloc_ctx = vb2_dma_contig_init_ctx(vi->dev);
+//	if (IS_ERR(chan->embedded.alloc_ctx)) {
+//		dev_err(vi->dev, "%s(): vb2 buffer init: %ld\n", __func__,
+//			PTR_ERR(chan->embedded.alloc_ctx));
+//		goto ctx_alloc_error;
+//	}
+//#endif
+
+	queue->type = V4L2_BUF_TYPE_META_CAPTURE;
+	queue->io_modes = VB2_MMAP | VB2_DMABUF | VB2_READ | VB2_USERPTR;
+	queue->lock = &chan->embedded.lock;
+	queue->drv_priv = chan;
+	queue->buf_struct_size = sizeof(struct tegra_channel_buffer);
+	queue->ops = &tegra_metadata_qops;
+#if defined(CONFIG_VIDEOBUF2_DMA_CONTIG)
+	queue->mem_ops = &vb2_dma_contig_memops;
+#endif
+	queue->timestamp_flags = V4L2_BUF_FLAG_TIMESTAMP_MONOTONIC |
+		V4L2_BUF_FLAG_TSTAMP_SRC_EOF;
+	ret = vb2_queue_init(queue);
+	if (ret < 0) {
+		dev_err(vi->dev, "%s(): metadata queue initialize: %d\n",
+			__func__, ret);
+		goto vb2_queue_error;
+	}
+
+	return 0;
+
+vb2_queue_error:
+#if defined(CONFIG_VIDEOBUF2_DMA_CONTIG)
+	tegra_vb2_dma_cleanup(vi->dev, chan->embedded.alloc_ctx,
+		&vi->vb2_dma_alloc_refcnt);
+ctx_alloc_error:
+#endif
+	media_entity_cleanup(&video->entity);
+
+	return ret;
+}
+
 int tegra_channel_init(struct tegra_channel *chan)
 {
 	int ret;
@@ -2364,6 +2644,14 @@ int tegra_channel_init(struct tegra_channel *chan)
 		goto deskew_ctx_err;
 	}
 
+	/*FIXME: init embedded channel only if embedded is set in DT*/
+	/*if (chan->embedded.height) {*/
+		ret =tegra_channel_video_init_embedded(chan);
+		if (ret < 0)
+			dev_err(chan->vi->dev, "failed to initialize embedded channel\n");
+			/*FIXME: should we fail channel init?*/
+	/*}*/
+
 	chan->init_done = true;
 
 	return 0;
@@ -2390,6 +2678,13 @@ int tegra_channel_cleanup(struct tegra_channel *chan)
 			chan->vi->emb_buf_size,
 			chan->vi->emb_buf_addr, chan->vi->emb_buf);
 		chan->vi->emb_buf_size = 0;
+		vb2_queue_release(&chan->embedded.queue);
+#if defined(CONFIG_VIDEOBUF2_DMA_CONTIG)
+		tegra_vb2_dma_cleanup(chan->vi->dev, chan->embedded.alloc_ctx,
+				&chan->vi->vb2_dma_alloc_refcnt);
+		//vb2_dma_contig_cleanup_ctx(chan->embedded.alloc_ctx);
+#endif
+		media_entity_cleanup(&chan->embedded.video.entity);
 	}
 
 	tegra_channel_dealloc_buffer_queue(chan);
diff --git a/drivers/media/platform/tegra/camera/vi/graph.c b/drivers/media/platform/tegra/camera/vi/graph.c
index 896c581..1ae6adf 100644
--- a/drivers/media/platform/tegra/camera/vi/graph.c
+++ b/drivers/media/platform/tegra/camera/vi/graph.c
@@ -354,8 +354,9 @@ static int tegra_vi_graph_notify_complete(struct v4l2_async_notifier *notifier)
 		container_of(notifier, struct tegra_channel, notifier);
 	struct tegra_vi_graph_entity *entity;
 	int ret;
+	int emb_ret;
 
-	dev_dbg(chan->vi->dev, "notify complete, all subdevs registered\n");
+	dev_err(chan->vi->dev, "notify complete, all subdevs registered\n");
 
 	ret = video_register_device(&chan->video, VFL_TYPE_GRABBER, -1);
 	if (ret < 0) {
@@ -364,6 +365,14 @@ static int tegra_vi_graph_notify_complete(struct v4l2_async_notifier *notifier)
 		return ret;
 	}
 
+	emb_ret = video_register_device(&chan->embedded.video,
+			VFL_TYPE_GRABBER, -1);
+	if (emb_ret < 0)
+		dev_err(&chan->video.dev, "%s(): register embedded %s: %d\n",
+			__func__, chan->embedded.video.name, emb_ret);
+	dev_err(&chan->video.dev, "%s(): register embedded %s: %d\n",
+				__func__, chan->embedded.video.name, emb_ret);
+
 	/* Create links for every entity. */
 	list_for_each_entry(entity, &chan->entities, list) {
 		if (entity->entity != NULL) {
diff --git a/drivers/media/platform/tegra/camera/vi/vi4_fops.c b/drivers/media/platform/tegra/camera/vi/vi4_fops.c
index e3c5a2b..0b397c1 100644
--- a/drivers/media/platform/tegra/camera/vi/vi4_fops.c
+++ b/drivers/media/platform/tegra/camera/vi/vi4_fops.c
@@ -234,14 +234,14 @@ static void tegra_channel_surface_setup(
 	int vnc_id = chan->vnc_id[index];
 	unsigned int offset = chan->buffer_offset[index];
 
-	if (chan->embedded_data_height > 0)
+	if (chan->embedded.height > 0)
 		vi4_channel_write(chan, vnc_id, ATOMP_EMB_SURFACE_OFFSET0,
 						  chan->vi->emb_buf);
 	else
 		vi4_channel_write(chan, vnc_id, ATOMP_EMB_SURFACE_OFFSET0, 0);
 	vi4_channel_write(chan, vnc_id, ATOMP_EMB_SURFACE_OFFSET0_H, 0x0);
 	vi4_channel_write(chan, vnc_id, ATOMP_EMB_SURFACE_STRIDE0,
-					  chan->embedded_data_width * BPP_MEM);
+					  chan->embedded.width * BPP_MEM);
 	vi4_channel_write(chan, vnc_id,
 		ATOMP_SURFACE_OFFSET0, buf->addr + offset);
 	vi4_channel_write(chan, vnc_id,
@@ -493,11 +493,11 @@ static int tegra_channel_capture_setup(struct tegra_channel *chan,
 	vi4_channel_write(chan, vnc_id, ATOMP_DPCM_CHUNK, 0x0);
 	vi4_channel_write(chan, vnc_id, ISPBUFA, 0x0);
 	vi4_channel_write(chan, vnc_id, LINE_TIMER, 0x1000000);
-	if (chan->embedded_data_height > 0) {
+	if (chan->embedded.height > 0) {
 		vi4_channel_write(chan, vnc_id, EMBED_X,
-			chan->embedded_data_width * BPP_MEM);
+			chan->embedded.width * BPP_MEM);
 		vi4_channel_write(chan, vnc_id, EMBED_Y,
-			chan->embedded_data_height | EXPECT);
+			chan->embedded.height | EXPECT);
 	} else {
 		vi4_channel_write(chan, vnc_id, EMBED_X, 0);
 		vi4_channel_write(chan, vnc_id, EMBED_Y, 0);
@@ -984,15 +984,15 @@ static int vi4_channel_start_streaming(struct vb2_queue *vq, u32 count)
 				sensor_mode =
 					&s_data->sensor_props.sensor_modes[idx];
 
-				chan->embedded_data_width =
+				chan->embedded.width =
 					sensor_mode->image_properties.width;
-				chan->embedded_data_height =
+				chan->embedded.height =
 					sensor_mode->image_properties.\
 					embedded_metadata_height;
 				/* rounding up to page size */
 				emb_buf_size =
-					round_up(chan->embedded_data_width *
-						chan->embedded_data_height *
+					round_up(chan->embedded.width *
+						chan->embedded.height *
 						BPP_MEM,
 						PAGE_SIZE);
 			}
diff --git a/drivers/media/platform/tegra/camera/vi/vi5_fops.c b/drivers/media/platform/tegra/camera/vi/vi5_fops.c
index 8f9be8a..ccf2432 100644
--- a/drivers/media/platform/tegra/camera/vi/vi5_fops.c
+++ b/drivers/media/platform/tegra/camera/vi/vi5_fops.c
@@ -297,16 +297,16 @@ static void vi5_setup_surface(struct tegra_channel *chan,
 	desc->ch_cfg.atomp.surface[0].offset_hi = (u32)(offset >> 32U);
 	desc->ch_cfg.atomp.surface_stride[0] = chan->format.bytesperline;
 
-	if (chan->embedded_data_height > 0) {
+	if (chan->embedded.height > 0) {
 		desc->ch_cfg.embdata_enable = 1;
-		desc->ch_cfg.frame.embed_x = chan->embedded_data_width * BPP_MEM;
-		desc->ch_cfg.frame.embed_y = chan->embedded_data_height;
+		desc->ch_cfg.frame.embed_x = chan->embedded.width * BPP_MEM;
+		desc->ch_cfg.frame.embed_y = chan->embedded.height;
 		desc->ch_cfg.atomp.surface[VI_ATOMP_SURFACE_EMBEDDED].offset
 			= (u32)chan->vi->emb_buf;
 		desc->ch_cfg.atomp.surface[VI_ATOMP_SURFACE_EMBEDDED].offset_hi
 			= (u32)(chan->vi->emb_buf >> 32U);
 		desc->ch_cfg.atomp.surface_stride[VI_ATOMP_SURFACE_EMBEDDED]
-			= chan->embedded_data_width * BPP_MEM;
+			= chan->embedded.width * BPP_MEM;
 	}
 
 	chan->capture_descr_sequence += 1;
@@ -316,12 +316,44 @@ static void vi5_release_buffer(struct tegra_channel *chan,
 	struct tegra_channel_buffer *buf)
 {
 	struct vb2_v4l2_buffer *vbuf = &buf->buf;
+	struct vb2_buffer *evb;
+	struct vb2_v4l2_buffer *evbuf;
 
 	vbuf->sequence = chan->sequence++;
 	vbuf->field = V4L2_FIELD_NONE;
 	vb2_set_plane_payload(&vbuf->vb2_buf, 0, chan->format.sizeimage);
 
+	evb = NULL;
+	if ((chan->embedded.height == 1)) {
+		void* frm_buffer;
+		spin_lock(&chan->embedded.spin_lock);
+		if (0 < chan->embedded.num_buffers ){
+			evb = chan->embedded.buffers[chan->embedded.tail];
+			chan->embedded.buffers[chan->embedded.tail] = NULL;
+			chan->embedded.tail++;
+			if (chan->embedded.tail > 15)
+				chan->embedded.tail = chan->embedded.tail - 16;
+			chan->embedded.num_buffers--;
+		}
+		spin_unlock(&chan->embedded.spin_lock);
+
+		if(evb) {
+			frm_buffer = vb2_plane_vaddr(evb, 0);
+			if(frm_buffer != NULL) {
+				memcpy(frm_buffer,chan->vi->emb_buf_addr,256);
+			}
+		}
+	}
+
 	vb2_buffer_done(&vbuf->vb2_buf, buf->vb2_state);
+	if (chan->embedded.height == 1 && evb) {
+		evbuf = to_vb2_v4l2_buffer(evb);
+		evbuf->sequence = vbuf->sequence;
+		/*FIXME: define 236*/
+		vb2_set_plane_payload(evb, 0, 236);
+		evb->timestamp = vbuf->vb2_buf.timestamp;
+		vb2_buffer_done(evb, VB2_BUF_STATE_DONE);
+	}
 }
 
 static void vi5_capture_enqueue(struct tegra_channel *chan,
@@ -726,15 +758,15 @@ static int vi5_channel_start_streaming(struct vb2_queue *vq, u32 count)
 				sensor_mode =
 					&s_data->sensor_props.sensor_modes[idx];
 
-				chan->embedded_data_width =
+				chan->embedded.width =
 					sensor_mode->image_properties.width;
-				chan->embedded_data_height =
+				chan->embedded.height =
 					sensor_mode->image_properties.\
 					embedded_metadata_height;
 				/* rounding up to page size */
 				emb_buf_size =
-					round_up(chan->embedded_data_width *
-						chan->embedded_data_height *
+					round_up(chan->embedded.width *
+						chan->embedded.height *
 						BPP_MEM,
 						PAGE_SIZE);
 			}
diff --git a/include/media/mc_common.h b/include/media/mc_common.h
index 8eb886c..d2d3667 100644
--- a/include/media/mc_common.h
+++ b/include/media/mc_common.h
@@ -219,8 +219,24 @@ struct tegra_channel {
 	unsigned int gang_height;
 	unsigned int gang_bytesperline;
 	unsigned int gang_sizeimage;
-	unsigned int embedded_data_width;
-	unsigned int embedded_data_height;
+
+	struct {
+		struct video_device video;
+		struct mutex lock;
+		spinlock_t spin_lock;
+		struct vb2_queue queue;
+		/*FIXME: 16 is max queued metadata buffers
+		 * define 16
+		 */
+		struct vb2_buffer *buffers[16];
+		unsigned int head;
+		unsigned int tail;
+		unsigned int num_buffers;
+		void *alloc_ctx;
+		struct media_pad pad;
+		unsigned int width;
+		unsigned int height;
+	} embedded;
 
 	DECLARE_BITMAP(fmts_bitmap, MAX_FORMAT_NUM);
 	atomic_t power_on_refcnt;
-- 
2.7.4

