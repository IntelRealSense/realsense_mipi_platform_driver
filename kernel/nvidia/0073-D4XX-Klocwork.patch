From 358f836fa5de4160c8166eae3c0dae7a9c585a03 Mon Sep 17 00:00:00 2001
From: Dmitry Perchanov <dmitry.perchanov@intel.com>
Date: Tue, 30 Aug 2022 17:03:44 +0300
Subject: [PATCH] Klocwork criticals fix

---
 drivers/media/i2c/d4xx.c | 83 +++++++++++++++++++++++++++++++++++-----
 1 file changed, 73 insertions(+), 10 deletions(-)

diff --git a/drivers/media/i2c/d4xx.c b/drivers/media/i2c/d4xx.c
index e8c1805..d884f47 100644
--- a/drivers/media/i2c/d4xx.c
+++ b/drivers/media/i2c/d4xx.c
@@ -448,7 +448,7 @@ static int ds5_write(struct ds5 *state, u16 reg, u16 val)
 	else
 		if (state->dfu_dev.dfu_state_flag == DS5_DFU_IDLE)
 			dev_dbg(&state->client->dev, "%s(): i2c write 0x%04x: 0x%x\n",
-				 __func__, reg, val);
+				__func__, reg, val);
 
 	return ret;
 }
@@ -831,7 +831,7 @@ static const char *ds5_get_sensor_name(struct ds5 *state)
 	static const char *sensor_name[] = {"unknown", "RGB", "DEPTH", "Y8", "IMU"};
 	int sensor_id = state->is_rgb * 1 + state->is_depth * 2 + \
 			state->is_y8 * 3 + state->is_imu * 4;
-	if (sensor_id > sizeof(sensor_name))
+	if (sensor_id > (sizeof(sensor_name)/sizeof(*sensor_name)))
 		sensor_id = 0;
 
 	return sensor_name[sensor_id];
@@ -1516,6 +1516,13 @@ static int ds5_s_ctrl(struct v4l2_ctrl *ctrl)
 				*((u8*)ctrl->p_new.p + 2)) {
 			calib_cmd = devm_kzalloc(&state->client->dev,
 					sizeof(struct hwm_cmd) + 256, GFP_KERNEL);
+			if (!calib_cmd) {
+				dev_err(&state->client->dev,
+						"%s(): Can't allocate memory for 0x%x\n",
+						__func__, ctrl->id);
+				ret = -ENOMEM;
+				break;
+			}
 			memcpy(calib_cmd, &set_calib_data, sizeof (set_calib_data));
 			calib_cmd->header = 276;
 			calib_cmd->param1 = DEPTH_CALIBRATION_ID;
@@ -1539,6 +1546,13 @@ static int ds5_s_ctrl(struct v4l2_ctrl *ctrl)
 					*((u8*)ctrl->p_new.p + 2)) {
 				calib_cmd = devm_kzalloc(&state->client->dev,
 						sizeof(struct hwm_cmd) + 512, GFP_KERNEL);
+				if (!calib_cmd) {
+					dev_err(&state->client->dev,
+							"%s(): Can't allocate memory for 0x%x\n",
+							__func__, ctrl->id);
+					ret = -ENOMEM;
+					break;
+				}
 				memcpy(calib_cmd, &set_calib_data, sizeof (set_calib_data));
 				calib_cmd->header = 532;
 				calib_cmd->param1 = COEF_CALIBRATION_ID;
@@ -1568,6 +1582,13 @@ static int ds5_s_ctrl(struct v4l2_ctrl *ctrl)
 					__func__, *(ctrl->p_new.p_s32));
 			ae_setpoint_cmd = devm_kzalloc(&state->client->dev,
 					sizeof(struct hwm_cmd) + 4, GFP_KERNEL);
+			if (!ae_setpoint_cmd) {
+				dev_err(&state->client->dev,
+						"%s(): Can't allocate memory for 0x%x\n",
+						__func__, ctrl->id);
+				ret = -ENOMEM;
+				break;
+			}
 			memcpy(ae_setpoint_cmd, &set_ae_setpoint, sizeof (set_ae_setpoint));
 			memcpy(ae_setpoint_cmd->Data, (u8*)ctrl->p_new.p_s32 , 4);
 			ret = ds5_send_hwmc(state, sizeof(struct hwm_cmd) + 4,
@@ -1590,9 +1611,15 @@ static int ds5_s_ctrl(struct v4l2_ctrl *ctrl)
 			dev_dbg(&state->client->dev, "%s(): offset %x, size: %x\n",
 							__func__, offset, size);
 
-
 			erb_cmd = devm_kzalloc(&state->client->dev,
 					sizeof(struct hwm_cmd) + size, GFP_KERNEL);
+			if (!erb_cmd) {
+				dev_err(&state->client->dev,
+						"%s(): Can't allocate memory for 0x%x\n",
+						__func__, ctrl->id);
+				ret = -ENOMEM;
+				break;
+			}
 			memcpy(erb_cmd, &erb, sizeof(struct hwm_cmd));
 			erb_cmd->param1 = offset;
 			erb_cmd->param2 = size;
@@ -1643,6 +1670,13 @@ static int ds5_s_ctrl(struct v4l2_ctrl *ctrl)
 			ewb_cmd = devm_kzalloc(&state->client->dev,
 					sizeof(struct hwm_cmd) + size,
 					GFP_KERNEL);
+			if (!ewb_cmd) {
+				dev_err(&state->client->dev,
+						"%s(): Can't allocate memory for 0x%x\n",
+						__func__, ctrl->id);
+				ret = -ENOMEM;
+				break;
+			}
 			memcpy(ewb_cmd, &ewb, sizeof (ewb));
 			ewb_cmd->header = 0x14 + size;
 			ewb_cmd->param1 = offset; // start index
@@ -1703,6 +1737,11 @@ static int ds5_get_calibration_data(struct ds5 *state, enum table_id id,
 
 	cmd = devm_kzalloc(&state->client->dev,
 			sizeof(struct hwm_cmd) + length + 4, GFP_KERNEL);
+	if (!cmd) {
+		dev_err(&state->client->dev, "%s(): Can't allocate memory\n", __func__);
+		return -ENOMEM;
+	}
+
 	memcpy(cmd, &get_calib_data, sizeof(get_calib_data));
 	cmd->param1 = id;
 	ds5_raw_write_with_check(state, 0x4900, cmd, sizeof(struct hwm_cmd));
@@ -1895,6 +1934,13 @@ static int ds5_g_volatile_ctrl(struct v4l2_ctrl *ctrl)
 		struct hwm_cmd *ae_roi_cmd;
 		ae_roi_cmd = devm_kzalloc(&state->client->dev,
 				sizeof(struct hwm_cmd) + 12, GFP_KERNEL);
+		if (!ae_roi_cmd) {
+			dev_err(&state->client->dev,
+					"%s(): Can't allocate memory for 0x%x\n",
+					__func__, ctrl->id);
+			ret = -ENOMEM;
+			break;
+		}
 		memcpy(ae_roi_cmd, &get_ae_roi, sizeof(struct hwm_cmd));
 		ret = ds5_send_hwmc(state, sizeof(struct hwm_cmd),
 				ae_roi_cmd, true, &len);
@@ -1907,6 +1953,13 @@ static int ds5_g_volatile_ctrl(struct v4l2_ctrl *ctrl)
 		struct hwm_cmd *ae_setpoint_cmd;
 		ae_setpoint_cmd = devm_kzalloc(&state->client->dev,
 				sizeof(struct hwm_cmd) + 8, GFP_KERNEL);
+		if (!ae_setpoint_cmd) {
+			dev_err(&state->client->dev,
+					"%s(): Can't allocate memory for 0x%x\n",
+					__func__, ctrl->id);
+			ret = -ENOMEM;
+			break;
+		}
 		memcpy(ae_setpoint_cmd, &get_ae_setpoint, sizeof(struct hwm_cmd));
 		ret = ds5_send_hwmc(state, sizeof(struct hwm_cmd),
 				ae_setpoint_cmd, true, &len);
@@ -3062,7 +3115,8 @@ e_entity:
 static int ds5_fixed_configuration(struct i2c_client *client, struct ds5 *state)
 {
 	struct ds5_sensor *sensor;
-	u16 cfg0, cfg0_md, cfg1, cfg1_md, dw, dh, yw, yh, dev_type;
+	u16 cfg0 = 0, cfg0_md = 0, cfg1 = 0, cfg1_md = 0;
+	u16 dw = 0, dh = 0, yw = 0, yh = 0, dev_type = 0;
 	int ret;
 
 	ret = ds5_read(state, DS5_DEPTH_STREAM_DT, &cfg0);
@@ -3338,7 +3392,7 @@ static int ds5_dfu_get_dev_info(struct ds5 *state, struct __fw_status *buf)
 static int ds5_dfu_detach(struct ds5 *state)
 {
 	int ret;
-	struct __fw_status buf;
+	struct __fw_status buf = {0};
 
 	ds5_write_with_check(state, 0x500c, 0x00);
 	ret = ds5_dfu_wait_for_get_dfu_status(state, dfuIDLE);
@@ -3367,7 +3421,7 @@ static ssize_t ds5_dfu_device_read(struct file *flip,
 	ret = ds5_read(state, DS5_FW_VERSION, &fw_ver);
 	if (ret < 0)
 		goto e_dfu_read_failed;
-	sprintf(msg ,"DFU info: \tver: (0x%x)\n", fw_ver);
+	snprintf(msg, sizeof(msg) ,"DFU info: \tver: (0x%x)\n", fw_ver);
 	if (copy_to_user(buffer, msg, strlen(msg)))
 		ret = -EFAULT;
 	else {
@@ -3480,12 +3534,18 @@ static int ds5_dfu_device_open(struct inode *inode, struct file *file)
 		state->dfu_dev.dfu_state_flag = DS5_DFU_OPEN;
 	state->dfu_dev.dfu_msg = devm_kzalloc(&state->client->dev,
 			DFU_BLOCK_SIZE, GFP_KERNEL);
+	if (!state->dfu_dev.dfu_msg)
+		return -ENOMEM;
+
 	file->private_data = state;
 
 	/* get i2c controller and set dfu bus clock rate */
 	while (parent && i2c_parent_is_i2c_adapter(parent))
 		parent = i2c_parent_is_i2c_adapter(state->client->adapter);
 
+	if (!parent)
+		return 0;
+
 	dev_dbg(&state->client->dev, "%s(): i2c-%d bus_clk = %d, set %d\n",
 			__func__,
 			i2c_adapter_id(parent),
@@ -3571,7 +3631,8 @@ static int ds5_dfu_device_release(struct inode *inode, struct file *file)
 	/* get i2c controller and restore bus clock rate */
 	while (parent && i2c_parent_is_i2c_adapter(parent))
 		parent = i2c_parent_is_i2c_adapter(state->client->adapter);
-
+	if (!parent)
+		return 0;
 	dev_dbg(&state->client->dev, "%s(): i2c-%d bus_clk %d, restore to %d\n",
 			__func__, i2c_adapter_id(parent),
 			i2c_get_adapter_bus_clk_rate(parent),
@@ -3626,7 +3687,8 @@ static int ds5_chrdev_init(struct i2c_client *c, struct ds5 *state)
 	/* Build up the current device number. To be used further */
 	*dev_num = MKDEV(MAJOR(*dev_num), MINOR(*dev_num));
 	/* Create a device node for this device. */
-	sprintf (dev_name, "%s%d", DS5_DRIVER_NAME_DFU, MAJOR(*dev_num));
+	snprintf (dev_name, sizeof(dev_name), "%s%d",
+			DS5_DRIVER_NAME_DFU, MAJOR(*dev_num));
 	chr_dev = device_create(*ds5_class, NULL, *dev_num, NULL, dev_name);
 	if (IS_ERR(chr_dev)) {
 		ret = PTR_ERR(chr_dev);
@@ -3664,7 +3726,7 @@ static ssize_t ds5_fw_ver_show(struct device *dev,
 	ds5_read(state, DS5_FW_VERSION, &state->fw_version);
 	ds5_read(state, DS5_FW_BUILD, &state->fw_build);
 
-	return sprintf(buf, "D4XX Sensor: %s, Version: %d.%d.%d.%d\n",
+	return snprintf(buf, PAGE_SIZE, "D4XX Sensor: %s, Version: %d.%d.%d.%d\n",
 			ds5_get_sensor_name(state),
 			(state->fw_version >> 8) & 0xff, state->fw_version & 0xff,
 			(state->fw_build >> 8) & 0xff, state->fw_build & 0xff);
@@ -3703,7 +3765,8 @@ static ssize_t ds5_read_reg_show(struct device *dev,
 		return -EINVAL;
 	ds5_read(state, ds5_rw_attr->reg, &rbuf);
 
-	n = sprintf(buf, "register:0x%4x, value:0x%02x\n", ds5_rw_attr->reg, rbuf);
+	n = snprintf(buf, PAGE_SIZE, "register:0x%4x, value:0x%02x\n",
+			ds5_rw_attr->reg, rbuf);
 
 	return n;
 }
-- 
2.37.1

