From 39177e06fce622192632091fed2a6702eca484e7 Mon Sep 17 00:00:00 2001
From: Xin Zhang <xin.x.zhang@intel.com>
Date: Mon, 14 Mar 2022 11:15:27 +0800
Subject: [PATCH] Still enable IR metadata node even if no metadata

Signed-off-by: Xin Zhang <xin.x.zhang@intel.com>
---
 .../media/platform/tegra/camera/vi/channel.c  | 18 +++----
 .../media/platform/tegra/camera/vi/graph.c    | 53 +++++++++++++------
 .../media/platform/tegra/camera/vi/vi5_fops.c |  3 +-
 include/media/mc_common.h                     |  1 +
 4 files changed, 45 insertions(+), 30 deletions(-)

diff --git a/drivers/media/platform/tegra/camera/vi/channel.c b/drivers/media/platform/tegra/camera/vi/channel.c
index 8a3ac2b1a..d049f1bf1 100644
--- a/drivers/media/platform/tegra/camera/vi/channel.c
+++ b/drivers/media/platform/tegra/camera/vi/channel.c
@@ -2348,7 +2348,11 @@ static int tegra_metadata_open(struct file *fp)
 	int ret;
 
 	mutex_lock(&chan->embedded.lock);
-	ret = v4l2_fh_open(fp);
+	// TODO: IR stream doesn't have metadata for now
+	if (chan->id != 2)
+		ret = v4l2_fh_open(fp);
+	else
+		ret = -EIO;
 	mutex_unlock(&chan->embedded.lock);
 
 	return ret;
@@ -2537,7 +2541,7 @@ static const struct vb2_ops tegra_metadata_qops = {
 	.stop_streaming		= tegra_metadata_stop_streaming,
 };
 
-static int tegra_channel_video_init_embedded(struct tegra_channel *chan)
+int tegra_channel_init_video_embedded(struct tegra_channel *chan)
 {
 	struct video_device *video = &chan->embedded.video;
 	struct vb2_queue *queue = &chan->embedded.queue;
@@ -2753,16 +2757,6 @@ int tegra_channel_init(struct tegra_channel *chan)
 		goto deskew_ctx_err;
 	}
 
-	/*FIXME: init embedded channel only if embedded is set in DT*/
-	/*if (chan->embedded.height) {*/
-	if (chan->id == 0 || chan->id == 1) {
-		ret =tegra_channel_video_init_embedded(chan);
-		if (ret < 0)
-			dev_err(chan->vi->dev, "failed to initialize embedded channel\n");
-			/*FIXME: should we fail channel init?*/
-	}
-	/*}*/
-
 	chan->init_done = true;
 
 	return 0;
diff --git a/drivers/media/platform/tegra/camera/vi/graph.c b/drivers/media/platform/tegra/camera/vi/graph.c
index 6544f884f..08f21c8bf 100644
--- a/drivers/media/platform/tegra/camera/vi/graph.c
+++ b/drivers/media/platform/tegra/camera/vi/graph.c
@@ -369,8 +369,11 @@ static int tegra_vi_graph_notify_complete(struct v4l2_async_notifier *notifier)
 	struct tegra_channel *chan =
 		container_of(notifier, struct tegra_channel, notifier);
 	struct tegra_vi_graph_entity *entity;
+	struct camera_common_data *s_data;
+	struct device_node *node;
+	struct sensor_mode_properties *sensor_mode = NULL;
+	int idx;
 	int ret;
-	int emb_ret;
 
 	dev_err(chan->vi->dev, "notify complete, all subdevs registered\n");
 
@@ -389,45 +392,61 @@ static int tegra_vi_graph_notify_complete(struct v4l2_async_notifier *notifier)
 		goto register_device_error;
 	}
 
-	if (chan->id == 0 || chan->id == 1) {
-		emb_ret = video_register_device(&chan->embedded.video,
-				VFL_TYPE_GRABBER, -1);
-		if (emb_ret < 0) {
-			dev_err(&chan->video->dev, "%s(): register embedded %s: %d\n",
-				__func__, chan->embedded.video.name, emb_ret);
-			goto register_embedded_device_error;
-		}
-		dev_err(&chan->video->dev, "%s(): register embedded %s: %d\n",
-					__func__, chan->embedded.video.name, emb_ret);
-	}
-
 	/* Create links for every entity. */
 	list_for_each_entry(entity, &chan->entities, list) {
 		if (entity->entity != NULL) {
 			ret = tegra_vi_graph_build_one(chan, entity);
 			if (ret < 0)
-				goto graph_error;
+				goto link_error;
 		}
 	}
 
 	/* Create links for channels */
 	ret = tegra_vi_graph_build_links(chan);
 	if (ret < 0)
-		goto graph_error;
+		goto link_error;
+
+	s_data = to_camera_common_data(chan->subdev_on_csi->dev);
+	node = chan->subdev_on_csi->dev->of_node;
+	if (s_data && node) {
+		idx = s_data->mode_prop_idx;
+		if (idx < s_data->sensor_props.num_modes)
+			sensor_mode = &s_data->sensor_props.sensor_modes[idx];
+	}
+
+	if (sensor_mode &&
+	    sensor_mode->image_properties.embedded_metadata_height > 0) {
+		ret = tegra_channel_init_video_embedded(chan);
+		if (ret < 0) {
+			dev_err(chan->vi->dev,
+				"failed to initialize embedded channel\n");
+			goto register_embedded_device_error;
+		}
+
+		ret = video_register_device(&chan->embedded.video,
+				VFL_TYPE_GRABBER, -1);
+		if (ret < 0) {
+			dev_err(&chan->video->dev, "failed to register embedded %s: %d\n",
+				chan->embedded.video.name, ret);
+			goto register_embedded_device_error;
+		}
+	}
 
 	ret = v4l2_device_register_subdev_nodes(&chan->vi->v4l2_dev);
 	if (ret < 0) {
 		dev_err(chan->vi->dev, "failed to register subdev nodes\n");
-		goto graph_error;
+		goto register_nodes_error;
 	}
 
 	chan->link_status++;
 
 	return 0;
 
-graph_error:
+register_nodes_error:
 	video_unregister_device(&chan->embedded.video);
 register_embedded_device_error:
+	tegra_vi_graph_remove_links(chan);
+link_error:
 	video_unregister_device(chan->video);
 register_device_error:
 	video_device_release(chan->video);
diff --git a/drivers/media/platform/tegra/camera/vi/vi5_fops.c b/drivers/media/platform/tegra/camera/vi/vi5_fops.c
index 0e2fe065b..6c666a09c 100644
--- a/drivers/media/platform/tegra/camera/vi/vi5_fops.c
+++ b/drivers/media/platform/tegra/camera/vi/vi5_fops.c
@@ -780,7 +780,8 @@ static int vi5_channel_start_streaming(struct vb2_queue *vq, u32 count)
 						chan->embedded.height =
 							sensor_mode->image_properties.\
 							embedded_metadata_height;
-						if (chan->id != 0 && chan->id != 1)
+						// TODO: IR stream doesn't have metadata for now
+						if (chan->id == 2)
 							chan->embedded.height = 0;
 						/* rounding up to page size */
 						emb_buf_size =
diff --git a/include/media/mc_common.h b/include/media/mc_common.h
index acfdadbe5..fd166593b 100644
--- a/include/media/mc_common.h
+++ b/include/media/mc_common.h
@@ -421,6 +421,7 @@ struct tegra_channel_buffer *dequeue_inflight(struct tegra_channel *chan);
 int tegra_channel_set_power(struct tegra_channel *chan, bool on);
 
 int tegra_channel_init_video(struct tegra_channel *chan);
+int tegra_channel_init_video_embedded(struct tegra_channel *chan);
 int tegra_channel_cleanup_video(struct tegra_channel *chan);
 
 struct tegra_vi_fops {
-- 
2.17.1

