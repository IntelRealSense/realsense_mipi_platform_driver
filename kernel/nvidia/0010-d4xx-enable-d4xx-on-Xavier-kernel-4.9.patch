From e1bf5c8bec2ef20ca71c9fcc52523d903e7cfe1d Mon Sep 17 00:00:00 2001
From: Nael Masalha <nael.masalha@intel.com>
Date: Sun, 19 Jan 2020 16:28:49 +0200
Subject: [PATCH 10/11] d4xx: enable d4xx on Xavier, kernel 4.9

Signed-off-by: Nael Masalha <nael.masalha@intel.com>
---
 drivers/media/i2c/d4xx.c                           | 113 ++++++++++++---------
 .../media/platform/tegra/camera/vi/vi5_formats.h   |  23 +++--
 drivers/video/tegra/camera/tegra_camera_platform.c |   5 +
 3 files changed, 85 insertions(+), 56 deletions(-)

diff --git a/drivers/media/i2c/d4xx.c b/drivers/media/i2c/d4xx.c
index 2156d8e..c7c56b6 100644
--- a/drivers/media/i2c/d4xx.c
+++ b/drivers/media/i2c/d4xx.c
@@ -736,7 +736,8 @@ static int ds5_sensor_get_fmt(struct v4l2_subdev *sd, struct v4l2_subdev_pad_con
 	mutex_unlock(&state->lock);
 
 	dev_info(sd->dev, "%s(): pad %x, code %x, res %ux%u\n", __func__, fmt->pad, fmt->format.code,
-		 fmt->format.width, fmt->format.height);
+	        fmt->format.width, fmt->format.height);
+
 
 	return 0;
 }
@@ -832,10 +833,10 @@ static int ds5_sensor_set_fmt(struct v4l2_subdev *sd, struct v4l2_subdev_pad_con
 static int ds5_configure(struct ds5 *state)
 {
 	/*const*/ struct ds5_sensor *depth = &state->depth.sensor;
-	/*const*/ struct ds5_sensor *motion_t = &state->motion_t.sensor;
+	/*const*/ //struct ds5_sensor *motion_t = &state->motion_t.sensor;
 	struct ds5_sensor *rgb = &state->rgb.sensor;
 	u8 dfmt = depth->streaming ? 0x31 : 0;
-	u8 mfmt = motion_t->streaming ? motion_t->config.format->data_type : 0;
+	u8 mfmt = 0; //motion_t->streaming ? motion_t->config.format->data_type : 0;
 	u8 rgbfmt = rgb->streaming ? rgb->config.format->data_type : 0;
 	int ret;
 
@@ -843,6 +844,15 @@ static int ds5_configure(struct ds5 *state)
 	if (!dfmt && !mfmt && !rgbfmt)
 		return -EINVAL;
 
+	if (depth->streaming && (
+	        depth->config.format->data_type == 0x2a ||
+	        depth->config.format->data_type == 0x24)) {
+	    dfmt = 0;
+	    mfmt = depth->config.format->data_type;
+	}
+
+	//dev_info(sensor->sd.dev, "%s(): dfmt: %x, mfmt: %x\n", __func__, dfmt, mfmt);
+
 	ret = ds5_write(state, DS5_DEPTH_Y_STREAMS_DT, dfmt | (mfmt << 8));
 	if (ret < 0)
 		return ret;
@@ -851,7 +861,7 @@ static int ds5_configure(struct ds5 *state)
 	if (ret < 0)
 		return ret;
 
-	if (depth->streaming) {
+	if (dfmt != 0) {
 		// TODO: remove if 0x31 DT is supported
 		//       this will configure FW to override DT in mipi header to
 		//       0x1E for depth, since DT 0x31 is not supported
@@ -879,16 +889,17 @@ static int ds5_configure(struct ds5 *state)
 			return ret;
 	}
 
-	if (motion_t->streaming) {
-		ret = ds5_write(state, DS5_DEPTH_Y_FPS, motion_t->config.framerate);
+	if (mfmt != 0) {
+	    ret = ds5_write(state, 0x401C, mfmt);
+		ret = ds5_write(state, DS5_DEPTH_Y_FPS, depth->config.framerate);
 		if (ret < 0)
 			return ret;
 
-		ret = ds5_write(state, DS5_Y_RES_WIDTH, motion_t->config.resolution->width);
+		ret = ds5_write(state, DS5_Y_RES_WIDTH, depth->config.resolution->width);
 		if (ret < 0)
 			return ret;
 
-		ret = ds5_write(state, DS5_Y_RES_HEIGHT, motion_t->config.resolution->height);
+		ret = ds5_write(state, DS5_Y_RES_HEIGHT, depth->config.resolution->height);
 		if (ret < 0)
 			return ret;
 	}
@@ -1862,12 +1873,12 @@ static int ds5_depth_init(struct i2c_client *c, struct ds5 *state)
 			       &ds5_depth_subdev_ops, "depth");
 }
 
-static int ds5_motion_t_init(struct i2c_client *c, struct ds5 *state)
+/*static int ds5_motion_t_init(struct i2c_client *c, struct ds5 *state)
 {
 	state->motion_t.sensor.mux_pad = DS5_MUX_PAD_MOTION_T;
 	return ds5_sensor_init(c, state, &state->motion_t.sensor,
 			       &ds5_motion_t_subdev_ops, "motion detection");
-}
+}*/
 
 static int ds5_rgb_init(struct i2c_client *c, struct ds5 *state)
 {
@@ -1897,21 +1908,20 @@ static int ds5_mux_enum_mbus_code(struct v4l2_subdev *sd,
 		remote_sd = &state->rgb.sensor.sd;
 		break;
 	case DS5_MUX_PAD_EXTERNAL:
-		if (mce->index >= state->motion_t.sensor.n_formats +
-		    state->depth.sensor.n_formats)
-			return -EINVAL;
+		/*if (mce->index >= state->motion_t.sensor.n_formats +
+		    state->depth.sensor.n_for*/
 
 		/*
 		 * First list Left node / Motion Tracker formats, then depth.
 		 * This should also help because D16 doesn't have a direct
 		 * analog in MIPI CSI-2.
 		 */
-		if (mce->index < state->motion_t.sensor.n_formats) {
+		/*if (mce->index < state->motion_t.sensor.n_formats) {
 			remote_sd = &state->motion_t.sensor.sd;
 		} else {
-			tmp.index = mce->index - state->motion_t.sensor.n_formats;
+			tmp.index = mce->index - state->motion_t.sensor.n_formats;*/
 			remote_sd = &state->depth.sensor.sd;
-		}
+		//}
 
 		break;
 	default:
@@ -1965,15 +1975,15 @@ static int ds5_mux_enum_frame_size(struct v4l2_subdev *sd,
 		 * Assume, that different sensors don't support the same formats
 		 * Try the Depth sensor first, then the Motion Tracker
 		 */
-		remote_sd = &state->depth.sensor.sd;
-		ret = ds5_sensor_enum_frame_size(remote_sd, NULL, &tmp);
-		if (!ret) {
-			*fse = tmp;
-			fse->pad = pad;
-			return 0;
-		}
-
-		remote_sd = &state->motion_t.sensor.sd;
+//		remote_sd = &state->depth.sensor.sd;
+//		ret = ds5_sensor_enum_frame_size(remote_sd, NULL, &tmp);
+//		if (!ret) {
+//			*fse = tmp;
+//			fse->pad = pad;
+//			return 0;
+//		}
+//
+//		remote_sd = &state->motion_t.sensor.sd;
 		break;
 	default:
 		return -EINVAL;
@@ -2068,10 +2078,12 @@ static int ds5_mux_set_fmt(struct v4l2_subdev *sd, struct v4l2_subdev_pad_config
 	int ret = 0;
 
 	if (!state->is_rgb)
-		if (fmt->format.code == MEDIA_BUS_FMT_UYVY8_1X16)
+		if (fmt->format.code == MEDIA_BUS_FMT_UYVY8_1X16 ||
+		        fmt->format.code == MEDIA_BUS_FMT_RGB888_1X24 ||
+		        fmt->format.code == MEDIA_BUS_FMT_Y8_1X8)
 			pad = DS5_MUX_PAD_DEPTH;
 		else
-			pad = DS5_MUX_PAD_MOTION_T;
+			pad = DS5_MUX_PAD_DEPTH;
 	else
 		pad = DS5_MUX_PAD_RGB;
 
@@ -2126,7 +2138,7 @@ static int ds5_mux_get_fmt(struct v4l2_subdev *sd, struct v4l2_subdev_pad_config
 		tmp.pad = DS5_MUX_PAD_RGB;
 		pad = DS5_MUX_PAD_RGB;
 	} else
-		tmp.pad = 0;
+		tmp.pad = 1;
 
 	switch (pad) {
 	case DS5_MUX_PAD_MOTION_T:
@@ -2148,10 +2160,10 @@ static int ds5_mux_get_fmt(struct v4l2_subdev *sd, struct v4l2_subdev_pad_config
 
 	/* Locks internally */
 	ret = ds5_sensor_get_fmt(remote_sd, cfg, &tmp);
-	if (!ret) {
-		*fmt = tmp;
-		fmt->pad = pad;
-	}
+	//if (!ret) {
+	//	*fmt = tmp;
+	//	fmt->pad = pad;
+	//}
 
 	return ret;
 }
@@ -2167,14 +2179,16 @@ static int ds5_mux_g_frame_interval(struct v4l2_subdev *sd,
 	if (NULL == sd || NULL == fi)
 		return -EINVAL;
 
-	dev_info(sd->dev, "%s(): %s %d\n", __func__, sd->name, fi->pad);
-
 	fi->interval.numerator = 1;
-	if(state->is_rgb)
+	if(state->is_rgb) {
+	    dev_info(sd->dev, "%s(): rgb %d\n", __func__, rgb->config.framerate);
 		fi->interval.denominator = rgb->config.framerate;
-	else
+	} else {
+	    dev_info(sd->dev, "%s(): depth %d \n", __func__, depth->config.framerate);
 		fi->interval.denominator = depth->config.framerate;
+	}
 
+	dev_info(sd->dev, "%s(): rgb\n", __func__);
 	return 0;
 }
 
@@ -2328,18 +2342,18 @@ static int ds5_mux_registered(struct v4l2_subdev *sd)
 	if (ret < 0)
 		return ret;
 
-	ret = ds5_sensor_register(state, &state->motion_t.sensor);
-	if (ret < 0)
-		goto e_depth;
+	//ret = ds5_sensor_register(state, &state->motion_t.sensor);
+	//if (ret < 0)
+	//	goto e_depth;
 
 	ret = ds5_sensor_register(state, &state->rgb.sensor);
 	if (ret < 0)
-		goto e_rgb;
+		goto e_depth;
 
 	return 0;
 
-e_rgb:
-	v4l2_device_unregister_subdev(&state->motion_t.sensor.sd);
+//e_rgb:
+//	v4l2_device_unregister_subdev(&state->motion_t.sensor.sd);
 
 e_depth:
 	v4l2_device_unregister_subdev(&state->depth.sensor.sd);
@@ -2863,17 +2877,17 @@ static int ds5_v4l_init(struct i2c_client *c,struct ds5 *state)
 	if (ret < 0)
 		return ret;
 
-	ret = ds5_motion_t_init(c, state);
-	if (ret < 0)
-		goto e_depth;
+	//ret = ds5_motion_t_init(c, state);
+	//if (ret < 0)
+	//	goto e_depth;
 
 	ret = ds5_rgb_init(c, state);
 	if (ret < 0)
-		goto e_rgb;
+		goto e_depth;
 
 	ret = ds5_mux_init(c, state);
 	if (ret < 0)
-		goto e_motion_t;
+		goto e_rgb;
 
 	ret = ds5_hw_init(c, state);
 	if (ret < 0)
@@ -2888,8 +2902,8 @@ e_mux:
 	ds5_mux_remove(state);
 e_rgb:
 	media_entity_cleanup(&state->rgb.sensor.sd.entity);
-e_motion_t:
-	media_entity_cleanup(&state->motion_t.sensor.sd.entity);
+//e_motion_t:
+//	media_entity_cleanup(&state->motion_t.sensor.sd.entity);
 e_depth:
 	media_entity_cleanup(&state->depth.sensor.sd.entity);
 	return ret;
@@ -3003,7 +3017,6 @@ static int ds5_probe(struct i2c_client *c, const struct i2c_device_id *id)
 
 
 	state->client = c;
-	dev_warn(&c->dev, "Driver data NAEL %d\n", (int)id->driver_data);
 	state->variant = ds5_variants + id->driver_data;
 
 	state->vcc = devm_regulator_get(&c->dev, "vcc");
diff --git a/drivers/media/platform/tegra/camera/vi/vi5_formats.h b/drivers/media/platform/tegra/camera/vi/vi5_formats.h
index 51cbbad..7d2169e 100644
--- a/drivers/media/platform/tegra/camera/vi/vi5_formats.h
+++ b/drivers/media/platform/tegra/camera/vi/vi5_formats.h
@@ -87,6 +87,8 @@ static const struct tegra_video_format vi5_video_formats[] = {
 	/* RAW 7: TODO */
 
 	/* RAW 8 */
+	TEGRA_VIDEO_FORMAT(RAW8, 8, Y8_1X8, 1, 1, T_R8,
+				RAW8, GREY, "Greyscale 8"),
 	TEGRA_VIDEO_FORMAT(RAW8, 8, SRGGB8_1X8, 1, 1, T_R8,
 				RAW8, SRGGB8, "RGRG.. GBGB.."),
 	TEGRA_VIDEO_FORMAT(RAW8, 8, SGRBG8_1X8, 1, 1, T_R8,
@@ -117,22 +119,22 @@ static const struct tegra_video_format vi5_video_formats[] = {
 				RAW12, SBGGR12, "BGBG.. GRGR.."),
 
 	/* RGB888 */
-	TEGRA_VIDEO_FORMAT(RGB888, 24, RGB888_1X24, 4, 1, T_A8R8G8B8,
-				RGB888, ABGR32, "BGRA-8-8-8-8"),
+	//TEGRA_VIDEO_FORMAT(RGB888, 24, RGB888_1X24, 4, 1, T_A8R8G8B8,
+	//			RGB888, ABGR32, "BGRA-8-8-8-8"),
 	TEGRA_VIDEO_FORMAT(RGB888, 24, RGB888_1X32_PADHI, 4, 1, T_A8B8G8R8,
 				RGB888, RGB32, "RGB-8-8-8-8"),
 
 	/* YUV422 */
-	TEGRA_VIDEO_FORMAT(YUV422, 16, UYVY8_1X16, 2, 1, T_U8_Y8__V8_Y8,
-				YUV422_8, UYVY, "YUV 4:2:2"),
+	//TEGRA_VIDEO_FORMAT(YUV422, 16, UYVY8_1X16, 2, 1, T_U8_Y8__V8_Y8,
+	//			YUV422_8, UYVY, "YUV 4:2:2"),
 	TEGRA_VIDEO_FORMAT(YUV422, 16, VYUY8_1X16, 2, 1, T_V8_Y8__U8_Y8,
 				YUV422_8, VYUY, "YUV 4:2:2"),
 	TEGRA_VIDEO_FORMAT(YUV422, 16, YUYV8_1X16, 2, 1, T_Y8_U8__Y8_V8,
 				YUV422_8, YUYV, "YUV 4:2:2"),
 	TEGRA_VIDEO_FORMAT(YUV422, 16, YVYU8_1X16, 2, 1, T_Y8_V8__Y8_U8,
 				YUV422_8, YVYU, "YUV 4:2:2"),
-	TEGRA_VIDEO_FORMAT(YUV422, 16, UYVY8_1X16, 1, 1, T_Y8__V8U8_N422,
-				YUV422_8, NV16, "NV16"),
+	//TEGRA_VIDEO_FORMAT(YUV422, 16, UYVY8_1X16, 1, 1, T_Y8__V8U8_N422,
+	//			YUV422_8, NV16, "NV16"),
 	TEGRA_VIDEO_FORMAT(YUV422, 16, UYVY8_2X8, 2, 1, T_U8_Y8__V8_Y8,
 				YUV422_8, UYVY, "YUV 4:2:2 UYVY"),
 	TEGRA_VIDEO_FORMAT(YUV422, 16, VYUY8_2X8, 2, 1, T_V8_Y8__U8_Y8,
@@ -141,6 +143,15 @@ static const struct tegra_video_format vi5_video_formats[] = {
 				YUV422_8, YUYV, "YUV 4:2:2 YUYV"),
 	TEGRA_VIDEO_FORMAT(YUV422, 16, YVYU8_2X8, 2, 1, T_Y8_V8__Y8_U8,
 				YUV422_8, YVYU, "YUV 4:2:2 YVYU"),
+
+	TEGRA_VIDEO_FORMAT(YUV422, 16, UYVY8_1X16, 2, 1, T_U8_Y8__V8_Y8,
+				YUV422_8, Z16, "Depth 16"),
+	// TODO: RealSesne calibration format Y12I should be 3-byte,
+	// R[7:3]R[3:0] | L[3:0]R[11:8] | L[11:8]L[7:4]
+	// but, currently, it's 4-byte, one byte is added as alignment
+	// R[7:3]R[3:0] | L[3:0]R[11:8] | L[11:8]L[7:4] | ALIGN[7:0]
+	TEGRA_VIDEO_FORMAT(RGB888, 24, RGB888_1X24, 4, 1, T_A8R8G8B8,
+				RGB888, Y12I, "Y12I 24"),
 };
 
 #endif
diff --git a/drivers/video/tegra/camera/tegra_camera_platform.c b/drivers/video/tegra/camera/tegra_camera_platform.c
index 81aebfb..5aaf9f9 100644
--- a/drivers/video/tegra/camera/tegra_camera_platform.c
+++ b/drivers/video/tegra/camera/tegra_camera_platform.c
@@ -960,6 +960,11 @@ int tegra_camera_update_clknbw(void *priv, bool stream_on)
 	struct tegra_camera_info *info;
 	int ret = 0;
 
+	/* TODO: workarouud for Xavier */
+	if (NULL == tegra_camera_misc.parent) {
+		return 0;
+	}
+
 	info = dev_get_drvdata(tegra_camera_misc.parent);
 	if (!info)
 		return -EINVAL;
-- 
2.7.4

