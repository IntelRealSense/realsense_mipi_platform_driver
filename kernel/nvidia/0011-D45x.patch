From 61935737265f830a3fb32376e121d6691401d7a5 Mon Sep 17 00:00:00 2001
From: Emil Jahshan <emil.jahshan@intel.com>
Date: Wed, 4 Aug 2021 15:13:40 +0300
Subject: [PATCH] D45x

adding new product id 6 for D45x

Signed-off-by: Emil Jahshan <emil.jahshan@intel.com>
---
 drivers/media/i2c/d4xx.c | 110 +++++++++++++++++++++++++++++++++++----
 1 file changed, 101 insertions(+), 9 deletions(-)

diff --git a/drivers/media/i2c/d4xx.c b/drivers/media/i2c/d4xx.c
index 5c051d360..2e4d2e6b1 100644
--- a/drivers/media/i2c/d4xx.c
+++ b/drivers/media/i2c/d4xx.c
@@ -45,8 +45,9 @@
 #define DS5_FW_VERSION			0x030C
 #define DS5_FW_BUILD			0x030E
 #define DS5_DEVICE_TYPE			0x0310
-	#define DS5_DEVICE_TYPE_D43X		5
-	#define DS5_DEVICE_TYPE_D46X		4
+#define DS5_DEVICE_TYPE_D45X        6
+#define DS5_DEVICE_TYPE_D43X		5
+#define DS5_DEVICE_TYPE_D46X		4
 #define DS5_DEPTH_Y_STREAMS_DT		0x4000
 #define DS5_DEPTH_Y_STREAMS_MD		0x4002
 #define DS5_DEPTH_RES_WIDTH		0x4004
@@ -435,6 +436,10 @@ static const u8 ds5_framerate_15_30[] = {15, 30};
 
 static const u8 ds5_framerate_25 = 25;
 
+static const u8 ds5_framerate_to_30[] = {5, 10, 15, 30};
+static const u8 ds5_framerate_to_60[] = {5, 15, 30, 60};
+static const u8 ds5_framerate_to_90[] = {5, 15, 30, 60, 90};
+
 static const struct ds5_resolution d43x_depth_sizes[] = {
 	{
 		.width = 1280,
@@ -477,7 +482,46 @@ static const struct ds5_resolution ds5_sizes[] = {
 	}
 };
 
-static const struct ds5_resolution ds5_rgb_sizes[] = {
+static const struct ds5_resolution ds5_rlt_rgb_sizes[] = {
+    {
+		.width = 1270,
+		.height = 800,
+		.framerates = ds5_framerate_to_30,
+		.n_framerates = ARRAY_SIZE(ds5_framerate_to_30),
+	}, {
+		.width = 1270,
+		.height = 720,
+		.framerates = ds5_framerate_to_30,
+		.n_framerates = ARRAY_SIZE(ds5_framerate_to_30),
+	}, {
+		.width = 848,
+		.height = 480,
+		.framerates = ds5_framerate_to_60,
+		.n_framerates = ARRAY_SIZE(ds5_framerate_to_60),
+	}, {
+		.width = 640,
+		.height = 480,
+		.framerates = ds5_framerate_to_60,
+		.n_framerates = ARRAY_SIZE(ds5_framerate_to_60),
+	}, {
+		.width = 640,
+		.height = 360,
+		.framerates = ds5_framerate_to_90,
+		.n_framerates = ARRAY_SIZE(ds5_framerate_to_90),
+	}, {
+		.width = 480,
+		.height = 270,
+		.framerates = ds5_framerate_to_90,
+		.n_framerates = ARRAY_SIZE(ds5_framerate_to_90),
+	}, {
+		.width = 424,
+		.height = 240,
+		.framerates = ds5_framerate_to_90,
+		.n_framerates = ARRAY_SIZE(ds5_framerate_to_90),
+	},
+};
+
+static const struct ds5_resolution ds5_onsemi_rgb_sizes[] = {
 	{
 		.width = 1920,
 		.height = 1080,
@@ -536,6 +580,27 @@ static const struct ds5_format ds5_depth_formats_d43x[] = {
 	},
 };
 
+static const struct ds5_format ds5_depth_formats_d45x[] = {
+	{
+		// TODO: 0x31 is replaced with 0x1e since it caused low FPS in Jetson.
+		.data_type = 0x1e,	/* UYVY */
+		.mbus_code = MEDIA_BUS_FMT_UYVY8_1X16,
+		.n_resolutions = ARRAY_SIZE(d46x_depth_sizes),
+		.resolutions = d46x_depth_sizes,
+	}, {
+		/* First format: default */
+		.data_type = 0x2a,	/* Y8 */
+		.mbus_code = MEDIA_BUS_FMT_Y8_1X8,
+		.n_resolutions = ARRAY_SIZE(d46x_depth_sizes),
+		.resolutions = d46x_depth_sizes,
+	}, {
+		.data_type = 0x24,	/* 24-bit Calibration */
+		.mbus_code = MEDIA_BUS_FMT_RGB888_1X24,	/* FIXME */
+		.n_resolutions = ARRAY_SIZE(d46x_calibration_sizes),
+		.resolutions = d46x_calibration_sizes,
+	},
+};
+
 static const struct ds5_format ds5_depth_formats_d46x[] = {
 	{
 		// TODO: 0x31 is replaced with 0x1e since it caused low FPS in Jetson.
@@ -574,13 +639,21 @@ static const struct ds5_format ds5_y_formats_ds5u[] = {
 	},
 };
 
-static const struct ds5_format ds5_rgb_format = {
+static const struct ds5_format ds5_rlt_rgb_format = {
+    .data_type = 0x1e,	/* UYVY */
+	.mbus_code = MEDIA_BUS_FMT_YUYV8_1X16,
+	.n_resolutions = ARRAY_SIZE(ds5_rlt_rgb_sizes),
+	.resolutions = ds5_rlt_rgb_sizes,
+};
+#define DS5_RLT_RGB_N_FORMATS 1
+
+static const struct ds5_format ds5_onsemi_rgb_format = {
 	.data_type = 0x1e,	/* UYVY */
 	.mbus_code = MEDIA_BUS_FMT_YUYV8_1X16,
-	.n_resolutions = ARRAY_SIZE(ds5_rgb_sizes),
-	.resolutions = ds5_rgb_sizes,
+	.n_resolutions = ARRAY_SIZE(ds5_onsemi_rgb_sizes),
+	.resolutions = ds5_onsemi_rgb_sizes,
 };
-#define DS5_RGB_N_FORMATS 1
+#define DS5_ONSEMI_RGB_N_FORMATS 1
 
 static const struct ds5_variant ds5_variants[] = {
 	[DS5_DS5U] = {
@@ -2485,6 +2558,7 @@ static int ds5_fixed_configuration(struct i2c_client *client, struct ds5 *state)
 		ret = ds5_read(state, DS5_Y_RES_HEIGHT, &yh);
 	if (!ret)
 		ret = ds5_read(state, DS5_DEVICE_TYPE, &dev_type);
+        dev_type = 6;
 	if (ret < 0)
 		return ret;
 
@@ -2500,6 +2574,7 @@ static int ds5_fixed_configuration(struct i2c_client *client, struct ds5 *state)
 	sensor = &state->depth.sensor;
 	switch (dev_type) {
 	case DS5_DEVICE_TYPE_D43X:
+    case DS5_DEVICE_TYPE_D45X: // TODO: add d45x formats struct
 		sensor->formats = ds5_depth_formats_d43x;
 		break;
 	case DS5_DEVICE_TYPE_D46X:
@@ -2536,9 +2611,25 @@ static int ds5_fixed_configuration(struct i2c_client *client, struct ds5 *state)
 	}
 
 	sensor = &state->rgb.sensor;
-	sensor->formats = &ds5_rgb_format;
+    switch (dev_type) {
+	case DS5_DEVICE_TYPE_D43X:
+    case DS5_DEVICE_TYPE_D46X:
+		sensor->formats = &ds5_onsemi_rgb_format;
+        sensor->n_formats = DS5_ONSEMI_RGB_N_FORMATS;
+		break;
+	case DS5_DEVICE_TYPE_D45X:
+		sensor->formats = &ds5_rlt_rgb_format;
+        sensor->n_formats = DS5_RLT_RGB_N_FORMATS;
+		break;
+	default:
+		sensor->formats = &ds5_onsemi_rgb_format;
+        sensor->n_formats = DS5_ONSEMI_RGB_N_FORMATS;
+	}
+    sensor->mux_pad = DS5_MUX_PAD_RGB;
+
+	/*sensor->formats = &ds5_onsemi_rgb_format;
 	sensor->n_formats = DS5_RGB_N_FORMATS;
-	sensor->mux_pad = DS5_MUX_PAD_RGB;
+	sensor->mux_pad = DS5_MUX_PAD_RGB;*/
 
 	/* Development: set a configuration during probing */
 	if ((cfg0 & 0xff00) == 0x1800) {
@@ -3003,6 +3094,7 @@ static int ds5_probe(struct i2c_client *c, const struct i2c_device_id *id)
 
 
 	state->client = c;
+    dev_warn(&c->dev, "Probing new driver for D45x\n");
 	dev_warn(&c->dev, "Driver data NAEL %d\n", (int)id->driver_data);
 	state->variant = ds5_variants + id->driver_data;
 
-- 
2.17.1

