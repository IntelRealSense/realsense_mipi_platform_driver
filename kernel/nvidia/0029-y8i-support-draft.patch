From 7ec28d1f4c67689ed1c37484e491cb9a027685d8 Mon Sep 17 00:00:00 2001
From: Emil Jahshan <emil.jahshan@intel.com>
Date: Mon, 14 Feb 2022 17:28:09 +0200
Subject: [PATCH] y8i support - draft

Signed-off-by: Emil Jahshan <emil.jahshan@intel.com>
---
 drivers/media/i2c/d4xx.c | 59 ++++++++++++++++++++++++----------------
 1 file changed, 36 insertions(+), 23 deletions(-)

diff --git a/drivers/media/i2c/d4xx.c b/drivers/media/i2c/d4xx.c
index 85f1d8233..ce4a2cd8f 100644
--- a/drivers/media/i2c/d4xx.c
+++ b/drivers/media/i2c/d4xx.c
@@ -361,7 +361,7 @@ struct ds5 {
 	struct regulator *vcc;
 	const struct ds5_variant *variant;
 	int is_depth;
-	int is_y8;
+	int is_y8i;
 	int is_rgb;
 	int is_imu;
 	u16 fw_version;
@@ -527,7 +527,7 @@ static const struct ds5_resolution d46x_depth_sizes[] = {
 	},
 };
 
-static const struct ds5_resolution y8_sizes[] = {
+static const struct ds5_resolution y8i_sizes[] = {
 	{
 		.width = 1280,
 		.height = 720,
@@ -670,9 +670,15 @@ static const struct ds5_format ds5_depth_formats_d43x[] = {
 		.mbus_code = MEDIA_BUS_FMT_UYVY8_1X16,
 		.n_resolutions = ARRAY_SIZE(d43x_depth_sizes),
 		.resolutions = d43x_depth_sizes,
+	//}, {
+	//	.data_type = 0x2a,	/* Y8 */
+	//	.mbus_code = MEDIA_BUS_FMT_Y8_1X8,
+	//	.n_resolutions = ARRAY_SIZE(d43x_depth_sizes),
+	//	.resolutions = d43x_depth_sizes,
+	//}, {
 	}, {
-		.data_type = 0x2a,	/* Y8 */
-		.mbus_code = MEDIA_BUS_FMT_Y8_1X8,
+		.data_type = 0x32,	/* Y8 */
+		.mbus_code = MEDIA_BUS_FMT_YUYV8_1X16,
 		.n_resolutions = ARRAY_SIZE(d43x_depth_sizes),
 		.resolutions = d43x_depth_sizes,
 	}, {
@@ -707,12 +713,19 @@ static const struct ds5_format ds5_depth_formats_d46x[] = {
 #define DS5_DEPTH_N_FORMATS 1
 
 static const struct ds5_format ds5_y_formats_ds5u[] = {
+	//{
+	//	/* First format: default */
+	//	.data_type = 0x2a,	/* Y8 */
+	//	.mbus_code = MEDIA_BUS_FMT_Y8_1X8,
+	//	.n_resolutions = ARRAY_SIZE(y8i_sizes),
+	//	.resolutions = y8i_sizes,
+	//}, {
 	{
 		/* First format: default */
-		.data_type = 0x2a,	/* Y8 */
-		.mbus_code = MEDIA_BUS_FMT_Y8_1X8,
-		.n_resolutions = ARRAY_SIZE(y8_sizes),
-		.resolutions = y8_sizes,
+		.data_type = 0x32,	/* Y8I */
+		.mbus_code = MEDIA_BUS_FMT_YUYV8_1X16,
+		.n_resolutions = ARRAY_SIZE(y8i_sizes),
+		.resolutions = y8i_sizes,
 	}, {
 		.data_type = 0x24,	/* 24-bit Calibration */
 		.mbus_code = MEDIA_BUS_FMT_RGB888_1X24,	/* FIXME */
@@ -821,7 +834,7 @@ static int ds5_sensor_enum_frame_size(struct v4l2_subdev *sd,
 	dev_info(sensor->sd.dev, "%s(): sensor %s \n", __func__, sensor->sd.name);
 	dev_info(sensor->sd.dev, "%s(): state->is_rgb %d\n", __func__, state->is_rgb);
 	dev_info(sensor->sd.dev, "%s(): state->is_depth %d\n", __func__, state->is_depth);
-	dev_info(sensor->sd.dev, "%s(): state->is_y8 %d\n", __func__, state->is_y8);
+	dev_info(sensor->sd.dev, "%s(): state->is_y8i %d\n", __func__, state->is_y8i);
 	dev_info(sensor->sd.dev, "%s(): state->is_imu %d\n", __func__, state->is_imu);
 
 	for (i = 0, fmt = sensor->formats; i < sensor->n_formats; i++, fmt++)
@@ -1008,7 +1021,7 @@ static int ds5_configure(struct ds5 *state)
 	int ret;
 
 	// IR Camera
-	if (state->is_y8) {
+	if (state->is_y8i) {
 		ret = ds5_write(state, DS5_IR_STREAM_DT, mfmt);
 		if (ret < 0)
 			return ret;
@@ -1017,7 +1030,7 @@ static int ds5_configure(struct ds5 *state)
 		if (ret < 0)
 			return ret;
 		
-		if (state->is_y8 && motion_t->streaming) {
+		if (state->is_y8i && motion_t->streaming) {
 			ret = ds5_write(state, DS5_IR_OVERRIDE, mfmt);
 			if (ret < 0)
 				return ret;
@@ -2124,7 +2137,7 @@ static int ds5_mux_enum_mbus_code(struct v4l2_subdev *sd,
 		remote_sd = &state->rgb.sensor.sd;
 	if (state->is_depth)
 		remote_sd = &state->depth.sensor.sd;
-	if (state->is_y8)
+	if (state->is_y8i)
 		remote_sd = &state->motion_t.sensor.sd;
 	if (state->is_imu)
 		remote_sd = &state->imu.sensor.sd;
@@ -2152,7 +2165,7 @@ static int ds5_mux_enum_frame_size(struct v4l2_subdev *sd,
 
 	if (state->is_depth)
 		pad = DS5_MUX_PAD_DEPTH;
-	if (state->is_y8)
+	if (state->is_y8i)
 		pad = DS5_MUX_PAD_MOTION_T;
 	if (state->is_rgb)
 		pad = DS5_MUX_PAD_RGB;
@@ -2219,7 +2232,7 @@ static int ds5_mux_enum_frame_interval(struct v4l2_subdev *sd,
 
 	if (state->is_depth)
 		pad = DS5_MUX_PAD_DEPTH;
-	if (state->is_y8)
+	if (state->is_y8i)
 		pad = DS5_MUX_PAD_MOTION_T;
 	if (state->is_rgb)
 		pad = DS5_MUX_PAD_RGB;
@@ -2280,7 +2293,7 @@ static int ds5_mux_set_fmt(struct v4l2_subdev *sd, struct v4l2_subdev_pad_config
 
 	if (state->is_depth)
 		pad = DS5_MUX_PAD_DEPTH;
-	if (state->is_y8)
+	if (state->is_y8i)
 		pad = DS5_MUX_PAD_MOTION_T;
 	if (state->is_rgb)
 		pad = DS5_MUX_PAD_RGB;
@@ -2346,7 +2359,7 @@ static int ds5_mux_get_fmt(struct v4l2_subdev *sd, struct v4l2_subdev_pad_config
 
 	if (state->is_depth)
 		pad = DS5_MUX_PAD_DEPTH;
-	if (state->is_y8)
+	if (state->is_y8i)
 		pad = DS5_MUX_PAD_MOTION_T;
 	if (state->is_rgb)
 		pad = DS5_MUX_PAD_RGB;
@@ -2436,7 +2449,7 @@ static int ds5_mux_s_frame_interval(struct v4l2_subdev *sd,
 		sensor = &state->rgb.sensor;
 	if (state->is_depth)
 		sensor = &state->depth.sensor;
-	if (state->is_y8)
+	if (state->is_y8i)
 		sensor = &state->motion_t.sensor;
 	if (state->is_imu)
 		sensor = &state->imu.sensor;
@@ -2473,7 +2486,7 @@ static int ds5_mux_s_stream(struct v4l2_subdev *sd, int on)
 
 		if (!ret) {
 			// start IR
-			if (state->is_y8) {
+			if (state->is_y8i) {
 				dev_info(&state->client->dev, "%s(): starting IR stream\n", __func__);
 				ret = ds5_write(state, DS5_START_STOP_STREAM, 0x204);
 				if (ret < 0)
@@ -2503,7 +2516,7 @@ static int ds5_mux_s_stream(struct v4l2_subdev *sd, int on)
 					ds5_read(state, 0x4800, &status);
 					if (status == 1 && streaming == 2) break;
 				}
-				if (state->is_y8) {
+				if (state->is_y8i) {
 					ds5_read(state, 0x1014, &streaming);
 					ds5_read(state, 0x4808, &status);
 					if (status == 1 && streaming == 2) break;
@@ -2530,7 +2543,7 @@ static int ds5_mux_s_stream(struct v4l2_subdev *sd, int on)
 		msleep_range(100);
 
 		// stop IR
-		if (state->is_y8) {
+		if (state->is_y8i) {
 			dev_info(&state->client->dev, "%s(): stopping IR stream\n", __func__);
 			ret = ds5_write(state, DS5_START_STOP_STREAM, 0x104);
 			if (ret < 0)
@@ -3388,7 +3401,7 @@ static int ds5_probe(struct i2c_client *c, const struct i2c_device_id *id)
 	}
 
 	state->is_depth = 0;
-	state->is_y8 = 0;
+	state->is_y8i = 0;
 	state->is_rgb = 0;
 	state->is_imu = 0;
 
@@ -3397,7 +3410,7 @@ static int ds5_probe(struct i2c_client *c, const struct i2c_device_id *id)
 	if (!err && !strncmp(str, "Depth", strlen("Depth")))
 		state->is_depth = 1;
 	if (!err && !strncmp(str, "Y8", strlen("Y8")))
-		state->is_y8 = 1;
+		state->is_y8i = 1;
 	if (!err && !strncmp(str, "RGB", strlen("RGB")))
 		state->is_rgb = 1;
 	if (!err && !strncmp(str, "IMU", strlen("IMU")))
@@ -3405,7 +3418,7 @@ static int ds5_probe(struct i2c_client *c, const struct i2c_device_id *id)
 
 	dev_info(&c->dev, "%s(): state->is_rgb %d\n", __func__, state->is_rgb);
 	dev_info(&c->dev, "%s(): state->is_depth %d\n", __func__, state->is_depth);
-	dev_info(&c->dev, "%s(): state->is_y8 %d\n", __func__, state->is_y8);
+	dev_info(&c->dev, "%s(): state->is_y8i %d\n", __func__, state->is_y8i);
 	dev_info(&c->dev, "%s(): state->is_imu %d\n", __func__, state->is_imu);
 
 	ret = ds5_v4l_init(c, state);
-- 
2.17.1

